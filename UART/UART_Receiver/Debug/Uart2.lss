
Uart2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001802  00001896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800064  00800064  0000189a  2**0
                  ALLOC
  3 .stab         00002340  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c9  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_13>
      38:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 0b 	call	0x16de	; 0x16de <main>
      8a:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_init+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <UART_init+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	9d 83       	std	Y+5, r25	; 0x05
      a2:	8c 83       	std	Y+4, r24	; 0x04
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	8b 83       	std	Y+3, r24	; 0x03
      a8:	ec 81       	ldd	r30, Y+4	; 0x04
      aa:	fd 81       	ldd	r31, Y+5	; 0x05
      ac:	80 81       	ld	r24, Z
      ae:	91 81       	ldd	r25, Z+1	; 0x01
      b0:	a2 81       	ldd	r26, Z+2	; 0x02
      b2:	b3 81       	ldd	r27, Z+3	; 0x03
      b4:	2c e2       	ldi	r18, 0x2C	; 44
      b6:	31 e0       	ldi	r19, 0x01	; 1
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	bc 01       	movw	r22, r24
      be:	cd 01       	movw	r24, r26
      c0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__udivmodsi4>
      c4:	dc 01       	movw	r26, r24
      c6:	cb 01       	movw	r24, r22
      c8:	00 97       	sbiw	r24, 0x00	; 0
      ca:	a1 05       	cpc	r26, r1
      cc:	b1 05       	cpc	r27, r1
      ce:	09 f0       	breq	.+2      	; 0xd2 <UART_init+0x40>
      d0:	4b c1       	rjmp	.+662    	; 0x368 <UART_init+0x2d6>
      d2:	ec 81       	ldd	r30, Y+4	; 0x04
      d4:	fd 81       	ldd	r31, Y+5	; 0x05
      d6:	84 81       	ldd	r24, Z+4	; 0x04
      d8:	88 30       	cpi	r24, 0x08	; 8
      da:	08 f0       	brcs	.+2      	; 0xde <UART_init+0x4c>
      dc:	42 c1       	rjmp	.+644    	; 0x362 <UART_init+0x2d0>
      de:	ec 81       	ldd	r30, Y+4	; 0x04
      e0:	fd 81       	ldd	r31, Y+5	; 0x05
      e2:	84 81       	ldd	r24, Z+4	; 0x04
      e4:	88 23       	and	r24, r24
      e6:	b1 f4       	brne	.+44     	; 0x114 <UART_init+0x82>
      e8:	a0 e4       	ldi	r26, 0x40	; 64
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	e0 e4       	ldi	r30, 0x40	; 64
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8d 7f       	andi	r24, 0xFD	; 253
      f4:	8c 93       	st	X, r24
      f6:	a0 e4       	ldi	r26, 0x40	; 64
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e0 e4       	ldi	r30, 0x40	; 64
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	8b 7f       	andi	r24, 0xFB	; 251
     102:	8c 93       	st	X, r24
     104:	a0 e4       	ldi	r26, 0x40	; 64
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	8b 7f       	andi	r24, 0xFB	; 251
     110:	8c 93       	st	X, r24
     112:	66 c0       	rjmp	.+204    	; 0x1e0 <UART_init+0x14e>
     114:	ec 81       	ldd	r30, Y+4	; 0x04
     116:	fd 81       	ldd	r31, Y+5	; 0x05
     118:	84 81       	ldd	r24, Z+4	; 0x04
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	b1 f4       	brne	.+44     	; 0x14a <UART_init+0xb8>
     11e:	a0 e4       	ldi	r26, 0x40	; 64
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	82 60       	ori	r24, 0x02	; 2
     12a:	8c 93       	st	X, r24
     12c:	a0 e4       	ldi	r26, 0x40	; 64
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e0 e4       	ldi	r30, 0x40	; 64
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8b 7f       	andi	r24, 0xFB	; 251
     138:	8c 93       	st	X, r24
     13a:	a0 e4       	ldi	r26, 0x40	; 64
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e0 e4       	ldi	r30, 0x40	; 64
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	8c 93       	st	X, r24
     148:	4b c0       	rjmp	.+150    	; 0x1e0 <UART_init+0x14e>
     14a:	ec 81       	ldd	r30, Y+4	; 0x04
     14c:	fd 81       	ldd	r31, Y+5	; 0x05
     14e:	84 81       	ldd	r24, Z+4	; 0x04
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	b1 f4       	brne	.+44     	; 0x180 <UART_init+0xee>
     154:	a0 e4       	ldi	r26, 0x40	; 64
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	e0 e4       	ldi	r30, 0x40	; 64
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	8d 7f       	andi	r24, 0xFD	; 253
     160:	8c 93       	st	X, r24
     162:	a0 e4       	ldi	r26, 0x40	; 64
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	e0 e4       	ldi	r30, 0x40	; 64
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	84 60       	ori	r24, 0x04	; 4
     16e:	8c 93       	st	X, r24
     170:	a0 e4       	ldi	r26, 0x40	; 64
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	e0 e4       	ldi	r30, 0x40	; 64
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	8b 7f       	andi	r24, 0xFB	; 251
     17c:	8c 93       	st	X, r24
     17e:	30 c0       	rjmp	.+96     	; 0x1e0 <UART_init+0x14e>
     180:	ec 81       	ldd	r30, Y+4	; 0x04
     182:	fd 81       	ldd	r31, Y+5	; 0x05
     184:	84 81       	ldd	r24, Z+4	; 0x04
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	b1 f4       	brne	.+44     	; 0x1b6 <UART_init+0x124>
     18a:	a0 e4       	ldi	r26, 0x40	; 64
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e0 e4       	ldi	r30, 0x40	; 64
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	82 60       	ori	r24, 0x02	; 2
     196:	8c 93       	st	X, r24
     198:	a0 e4       	ldi	r26, 0x40	; 64
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	e0 e4       	ldi	r30, 0x40	; 64
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	84 60       	ori	r24, 0x04	; 4
     1a4:	8c 93       	st	X, r24
     1a6:	a0 e4       	ldi	r26, 0x40	; 64
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e0 e4       	ldi	r30, 0x40	; 64
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8b 7f       	andi	r24, 0xFB	; 251
     1b2:	8c 93       	st	X, r24
     1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <UART_init+0x14e>
     1b6:	a0 e4       	ldi	r26, 0x40	; 64
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e0 e4       	ldi	r30, 0x40	; 64
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	8c 93       	st	X, r24
     1c4:	a0 e4       	ldi	r26, 0x40	; 64
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	e0 e4       	ldi	r30, 0x40	; 64
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	84 60       	ori	r24, 0x04	; 4
     1d0:	8c 93       	st	X, r24
     1d2:	a0 e4       	ldi	r26, 0x40	; 64
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	e0 e4       	ldi	r30, 0x40	; 64
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	84 60       	ori	r24, 0x04	; 4
     1de:	8c 93       	st	X, r24
     1e0:	ec 81       	ldd	r30, Y+4	; 0x04
     1e2:	fd 81       	ldd	r31, Y+5	; 0x05
     1e4:	85 81       	ldd	r24, Z+5	; 0x05
     1e6:	88 23       	and	r24, r24
     1e8:	31 f0       	breq	.+12     	; 0x1f6 <UART_init+0x164>
     1ea:	ec 81       	ldd	r30, Y+4	; 0x04
     1ec:	fd 81       	ldd	r31, Y+5	; 0x05
     1ee:	85 81       	ldd	r24, Z+5	; 0x05
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	09 f0       	breq	.+2      	; 0x1f6 <UART_init+0x164>
     1f4:	b3 c0       	rjmp	.+358    	; 0x35c <UART_init+0x2ca>
     1f6:	0e 94 bf 01 	call	0x37e	; 0x37e <UART_CheckSync>
     1fa:	8b 83       	std	Y+3, r24	; 0x03
     1fc:	ec 81       	ldd	r30, Y+4	; 0x04
     1fe:	fd 81       	ldd	r31, Y+5	; 0x05
     200:	85 81       	ldd	r24, Z+5	; 0x05
     202:	80 93 64 00 	sts	0x0064, r24
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	09 f0       	breq	.+2      	; 0x20e <UART_init+0x17c>
     20c:	af c0       	rjmp	.+350    	; 0x36c <UART_init+0x2da>
     20e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UART_CheckParity>
     212:	8b 83       	std	Y+3, r24	; 0x03
     214:	8b 81       	ldd	r24, Y+3	; 0x03
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	09 f0       	breq	.+2      	; 0x21c <UART_init+0x18a>
     21a:	a8 c0       	rjmp	.+336    	; 0x36c <UART_init+0x2da>
     21c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UART_CheckStopBit>
     220:	8b 83       	std	Y+3, r24	; 0x03
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	09 f0       	breq	.+2      	; 0x22a <UART_init+0x198>
     228:	a1 c0       	rjmp	.+322    	; 0x36c <UART_init+0x2da>
     22a:	ec 81       	ldd	r30, Y+4	; 0x04
     22c:	fd 81       	ldd	r31, Y+5	; 0x05
     22e:	85 81       	ldd	r24, Z+5	; 0x05
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	09 f0       	breq	.+2      	; 0x236 <UART_init+0x1a4>
     234:	4d c0       	rjmp	.+154    	; 0x2d0 <UART_init+0x23e>
     236:	a0 e4       	ldi	r26, 0x40	; 64
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	e0 e4       	ldi	r30, 0x40	; 64
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	80 68       	ori	r24, 0x80	; 128
     242:	8c 93       	st	X, r24
     244:	ec 81       	ldd	r30, Y+4	; 0x04
     246:	fd 81       	ldd	r31, Y+5	; 0x05
     248:	80 81       	ld	r24, Z
     24a:	91 81       	ldd	r25, Z+1	; 0x01
     24c:	a2 81       	ldd	r26, Z+2	; 0x02
     24e:	b3 81       	ldd	r27, Z+3	; 0x03
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	aa 1f       	adc	r26, r26
     256:	bb 1f       	adc	r27, r27
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	aa 1f       	adc	r26, r26
     25e:	bb 1f       	adc	r27, r27
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	aa 1f       	adc	r26, r26
     266:	bb 1f       	adc	r27, r27
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	aa 1f       	adc	r26, r26
     26e:	bb 1f       	adc	r27, r27
     270:	9c 01       	movw	r18, r24
     272:	ad 01       	movw	r20, r26
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	92 e1       	ldi	r25, 0x12	; 18
     278:	aa e7       	ldi	r26, 0x7A	; 122
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__udivmodsi4>
     284:	da 01       	movw	r26, r20
     286:	c9 01       	movw	r24, r18
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	9a 83       	std	Y+2, r25	; 0x02
     28c:	89 83       	std	Y+1, r24	; 0x01
     28e:	aa e2       	ldi	r26, 0x2A	; 42
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ea e2       	ldi	r30, 0x2A	; 42
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	88 60       	ori	r24, 0x08	; 8
     29a:	8c 93       	st	X, r24
     29c:	aa e2       	ldi	r26, 0x2A	; 42
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	ea e2       	ldi	r30, 0x2A	; 42
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	80 61       	ori	r24, 0x10	; 16
     2a8:	8c 93       	st	X, r24
     2aa:	e0 e4       	ldi	r30, 0x40	; 64
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	89 2f       	mov	r24, r25
     2b4:	99 27       	eor	r25, r25
     2b6:	80 83       	st	Z, r24
     2b8:	e9 e2       	ldi	r30, 0x29	; 41
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	80 83       	st	Z, r24
     2c0:	af e5       	ldi	r26, 0x5F	; 95
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	ef e5       	ldi	r30, 0x5F	; 95
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	80 68       	ori	r24, 0x80	; 128
     2cc:	8c 93       	st	X, r24
     2ce:	4e c0       	rjmp	.+156    	; 0x36c <UART_init+0x2da>
     2d0:	a0 e4       	ldi	r26, 0x40	; 64
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e0 e4       	ldi	r30, 0x40	; 64
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	80 68       	ori	r24, 0x80	; 128
     2dc:	8c 93       	st	X, r24
     2de:	ec 81       	ldd	r30, Y+4	; 0x04
     2e0:	fd 81       	ldd	r31, Y+5	; 0x05
     2e2:	80 81       	ld	r24, Z
     2e4:	91 81       	ldd	r25, Z+1	; 0x01
     2e6:	a2 81       	ldd	r26, Z+2	; 0x02
     2e8:	b3 81       	ldd	r27, Z+3	; 0x03
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	aa 1f       	adc	r26, r26
     2f0:	bb 1f       	adc	r27, r27
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	aa 1f       	adc	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	aa 1f       	adc	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	aa 1f       	adc	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	9c 01       	movw	r18, r24
     30c:	ad 01       	movw	r20, r26
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	92 e1       	ldi	r25, 0x12	; 18
     312:	aa e7       	ldi	r26, 0x7A	; 122
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__udivmodsi4>
     31e:	da 01       	movw	r26, r20
     320:	c9 01       	movw	r24, r18
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	aa e2       	ldi	r26, 0x2A	; 42
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	ea e2       	ldi	r30, 0x2A	; 42
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	88 60       	ori	r24, 0x08	; 8
     334:	8c 93       	st	X, r24
     336:	aa e2       	ldi	r26, 0x2A	; 42
     338:	b0 e0       	ldi	r27, 0x00	; 0
     33a:	ea e2       	ldi	r30, 0x2A	; 42
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	80 61       	ori	r24, 0x10	; 16
     342:	8c 93       	st	X, r24
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	89 2f       	mov	r24, r25
     34e:	99 27       	eor	r25, r25
     350:	80 83       	st	Z, r24
     352:	e9 e2       	ldi	r30, 0x29	; 41
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	80 83       	st	Z, r24
     35a:	08 c0       	rjmp	.+16     	; 0x36c <UART_init+0x2da>
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	05 c0       	rjmp	.+10     	; 0x36c <UART_init+0x2da>
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	02 c0       	rjmp	.+4      	; 0x36c <UART_init+0x2da>
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	8b 83       	std	Y+3, r24	; 0x03
     36c:	8b 81       	ldd	r24, Y+3	; 0x03
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <UART_CheckSync>:
	}
	return Local_u8_ErrorStatus;
}

static UART_Error_t UART_CheckSync(void)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	0f 92       	push	r0
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;    /*Check Configuration File if entered State is Sync or Async or other */
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	89 83       	std	Y+1, r24	; 0x01
	#if(UART_ASYNCHRONOUS == ENABLE)
		CLR_BIT(UCSRC,UCSRC_UMSEL);
     38c:	a0 e4       	ldi	r26, 0x40	; 64
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e0 e4       	ldi	r30, 0x40	; 64
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	8f 7b       	andi	r24, 0xBF	; 191
     398:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSRC_UMSEL);
	#else
		Local_u8_ErrorStatus = UART_ERROR_SYNCHRONIZATION;
	#endif

	return Local_u8_ErrorStatus;
     39a:	89 81       	ldd	r24, Y+1	; 0x01
}
     39c:	0f 90       	pop	r0
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	08 95       	ret

000003a4 <UART_CheckParity>:

static UART_Error_t UART_CheckParity(void)
{
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	0f 92       	push	r0
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;   /*Check Configuration File if parity is even or odd or other*/
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRC,UCSRC_UPM0);
	#elif(UART_PARITY_CHOICE == UART_PARITY_ODD)
		SET_BIT(UCSRC,UCSRC_UPM1);
		CLR_BIT(UCSRC,UCSRC_UPM0);
	#elif(UART_PARITY_CHOICE == UART_NO_PARITY)
		CLR_BIT(UCSRC,UCSRC_UPM1);
     3b2:	a0 e4       	ldi	r26, 0x40	; 64
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e0 e4       	ldi	r30, 0x40	; 64
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7d       	andi	r24, 0xDF	; 223
     3be:	8c 93       	st	X, r24
		CLR_BIT(UCSRC,UCSRC_UPM0);
     3c0:	a0 e4       	ldi	r26, 0x40	; 64
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e0 e4       	ldi	r30, 0x40	; 64
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	8c 93       	st	X, r24
	#else
		Local_u8_ErrorStatus = UART_ERROR_PARITY;
	#endif
		return Local_u8_ErrorStatus;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     3d0:	0f 90       	pop	r0
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	08 95       	ret

000003d8 <UART_CheckStopBit>:

static UART_Error_t UART_CheckStopBit(void)  /*Check Configuration File if stop bit is one  or two or other*/
{
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	0f 92       	push	r0
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	89 83       	std	Y+1, r24	; 0x01
	#if(STOP_BITS == UART_ONE_STOP_BIT)
		CLR_BIT(UCSRC,UCSRC_USBS);
     3e6:	a0 e4       	ldi	r26, 0x40	; 64
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e0 e4       	ldi	r30, 0x40	; 64
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	87 7f       	andi	r24, 0xF7	; 247
     3f2:	8c 93       	st	X, r24
	#elif(STOP_BITS == UART_TWO_STOP_BITS)
		SET_BIT(UCSRC,UCSRC_USBS);
	#else
		Local_u8_ErrorStatus = UART_ERROR_STOPBIT;
	#endif
		return Local_u8_ErrorStatus;
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f6:	0f 90       	pop	r0
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	08 95       	ret

000003fe <UART_sendByte>:
*Description: Sending byte of data
* Input     : u16Data to send
* Output    : Error Status
* */
UART_Error_t UART_sendByte(const uint8_t u8_Data)
{
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	00 d0       	rcall	.+0      	; 0x404 <UART_sendByte+0x6>
     404:	0f 92       	push	r0
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	8b 83       	std	Y+3, r24	; 0x03
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_ValueUDRE;

	if(G_UartMode == UART_POLLING)   /*In Case of Polling*/
     410:	80 91 64 00 	lds	r24, 0x0064
     414:	88 23       	and	r24, r24
     416:	81 f4       	brne	.+32     	; 0x438 <UART_sendByte+0x3a>
	{

		Local_u8_ValueUDRE = GET_BIT(UCSRA,UCSRA_UDRE) ;
     418:	eb e2       	ldi	r30, 0x2B	; 43
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	82 95       	swap	r24
     420:	86 95       	lsr	r24
     422:	87 70       	andi	r24, 0x07	; 7
     424:	81 70       	andi	r24, 0x01	; 1
     426:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8_ValueUDRE == 1)
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	d9 f4       	brne	.+54     	; 0x464 <UART_sendByte+0x66>
		{
			UDR = u8_Data;
     42e:	ec e2       	ldi	r30, 0x2C	; 44
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	80 83       	st	Z, r24
     436:	16 c0       	rjmp	.+44     	; 0x464 <UART_sendByte+0x66>
		}
	}
	else
	{
		if((GET_BIT(UCSRA,UCSRA_DOR)) == 0)  /*check Detect over Run */
     438:	eb e2       	ldi	r30, 0x2B	; 43
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	86 95       	lsr	r24
     440:	86 95       	lsr	r24
     442:	86 95       	lsr	r24
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	81 70       	andi	r24, 0x01	; 1
     44a:	90 70       	andi	r25, 0x00	; 0
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	51 f4       	brne	.+20     	; 0x464 <UART_sendByte+0x66>
		{
			G_sendData = u8_Data;
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	80 93 70 00 	sts	0x0070, r24

			SET_BIT(UCSRB,UCSRB_UDRIE);
     456:	aa e2       	ldi	r26, 0x2A	; 42
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	ea e2       	ldi	r30, 0x2A	; 42
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	80 62       	ori	r24, 0x20	; 32
     462:	8c 93       	st	X, r24
		}
	}

		return Local_u8_ErrorStatus;
     464:	8a 81       	ldd	r24, Y+2	; 0x02
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <UART_recieveByte>:
*Description: Receiving byte of data
* Input     : pointer to u16Data
* Output    : Error Status
* */
UART_Error_t UART_recieveByte(uint8_t *u8_Data)
{
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	00 d0       	rcall	.+0      	; 0x478 <UART_recieveByte+0x6>
     478:	0f 92       	push	r0
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	9b 83       	std	Y+3, r25	; 0x03
     480:	8a 83       	std	Y+2, r24	; 0x02
	UART_Error_t Local_u8_ErrorStatus = UART_ERROR_OK;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	89 83       	std	Y+1, r24	; 0x01

	if(G_UartMode == UART_POLLING)
     486:	80 91 64 00 	lds	r24, 0x0064
     48a:	88 23       	and	r24, r24
     48c:	79 f4       	brne	.+30     	; 0x4ac <UART_recieveByte+0x3a>
	{
		if((GET_BIT(UCSRA,7)) ==1)  /*In Case Of polling*/
     48e:	eb e2       	ldi	r30, 0x2B	; 43
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	88 1f       	adc	r24, r24
     496:	88 27       	eor	r24, r24
     498:	88 1f       	adc	r24, r24
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	a1 f4       	brne	.+40     	; 0x4c6 <UART_recieveByte+0x54>
		{
			*u8_Data=UDR;
     49e:	ec e2       	ldi	r30, 0x2C	; 44
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	ea 81       	ldd	r30, Y+2	; 0x02
     4a6:	fb 81       	ldd	r31, Y+3	; 0x03
     4a8:	80 83       	st	Z, r24
     4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <UART_recieveByte+0x54>
		}
	}
	else
	{
		 G_sendData2 = u8_Data;
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	90 93 6f 00 	sts	0x006F, r25
     4b4:	80 93 6e 00 	sts	0x006E, r24
		SET_BIT(UCSRB,UCSRB_RXCIE); /*Enable Interrupt*/
     4b8:	aa e2       	ldi	r26, 0x2A	; 42
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	ea e2       	ldi	r30, 0x2A	; 42
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 68       	ori	r24, 0x80	; 128
     4c4:	8c 93       	st	X, r24

	}

	return Local_u8_ErrorStatus;
     4c6:	89 81       	ldd	r24, Y+1	; 0x01

}
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	08 95       	ret

000004d4 <UART_GetPollingFlag>:
*Description: Receiving Flag used in Case of Polling
* Input     : pointer to u8Data
* Output    : No Return
* */
void UART_GetPollingFlag(uint8_t *u8_Data)
{
     4d4:	df 93       	push	r29
     4d6:	cf 93       	push	r28
     4d8:	00 d0       	rcall	.+0      	; 0x4da <UART_GetPollingFlag+0x6>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9b 83       	std	Y+3, r25	; 0x03
     4e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8_ValueTX;

	Local_u8_ValueTX = GET_BIT(UCSRA,UCSRA_TXC); /*Get Value of Transmit Flag*/
     4e4:	eb e2       	ldi	r30, 0x2B	; 43
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	82 95       	swap	r24
     4ec:	86 95       	lsr	r24
     4ee:	86 95       	lsr	r24
     4f0:	83 70       	andi	r24, 0x03	; 3
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_ValueTX == 1)
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	61 f4       	brne	.+24     	; 0x514 <UART_GetPollingFlag+0x40>
	{
		SET_BIT(UCSRA,6);
     4fc:	ab e2       	ldi	r26, 0x2B	; 43
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	eb e2       	ldi	r30, 0x2B	; 43
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	80 64       	ori	r24, 0x40	; 64
     508:	8c 93       	st	X, r24
		*u8_Data = 1;  /*Add One to return */
     50a:	ea 81       	ldd	r30, Y+2	; 0x02
     50c:	fb 81       	ldd	r31, Y+3	; 0x03
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 83       	st	Z, r24
     512:	03 c0       	rjmp	.+6      	; 0x51a <UART_GetPollingFlag+0x46>
	}
	else
	{
		*u8_Data  = 0;  /*Add Zero To Return */
     514:	ea 81       	ldd	r30, Y+2	; 0x02
     516:	fb 81       	ldd	r31, Y+3	; 0x03
     518:	10 82       	st	Z, r1
	}
}
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	cf 91       	pop	r28
     522:	df 91       	pop	r29
     524:	08 95       	ret

00000526 <__vector_14>:


void __vector_14(void)
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
     534:	af 93       	push	r26
     536:	bf 93       	push	r27
     538:	ef 93       	push	r30
     53a:	ff 93       	push	r31
     53c:	df 93       	push	r29
     53e:	cf 93       	push	r28
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
	if((GET_BIT(UCSRA,UCSRA_UDRE))==1  && (GET_BIT(UCSRA,UCSRA_DOR))==0 ) /*Check if UDR is Empty and overRun Error*/
     544:	eb e2       	ldi	r30, 0x2B	; 43
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	82 95       	swap	r24
     54c:	86 95       	lsr	r24
     54e:	87 70       	andi	r24, 0x07	; 7
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	81 70       	andi	r24, 0x01	; 1
     556:	90 70       	andi	r25, 0x00	; 0
     558:	88 23       	and	r24, r24
     55a:	89 f0       	breq	.+34     	; 0x57e <__vector_14+0x58>
     55c:	eb e2       	ldi	r30, 0x2B	; 43
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	86 95       	lsr	r24
     564:	86 95       	lsr	r24
     566:	86 95       	lsr	r24
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	81 70       	andi	r24, 0x01	; 1
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	29 f4       	brne	.+10     	; 0x57e <__vector_14+0x58>
	{
		UDR = G_sendData;   /*Move Data to UDR*/
     574:	ec e2       	ldi	r30, 0x2C	; 44
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 91 70 00 	lds	r24, 0x0070
     57c:	80 83       	st	Z, r24
	}

	CLR_BIT(UCSRB,UCSRB_UDRIE); /*Disable Interrupt*/
     57e:	aa e2       	ldi	r26, 0x2A	; 42
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	ea e2       	ldi	r30, 0x2A	; 42
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	8f 7d       	andi	r24, 0xDF	; 223
     58a:	8c 93       	st	X, r24
}
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	0f 90       	pop	r0
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	0f 90       	pop	r0
     5a2:	1f 90       	pop	r1
     5a4:	18 95       	reti

000005a6 <__vector_13>:

void __vector_13(void)
{
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	8f 93       	push	r24
     5b2:	9f 93       	push	r25
     5b4:	af 93       	push	r26
     5b6:	bf 93       	push	r27
     5b8:	ef 93       	push	r30
     5ba:	ff 93       	push	r31
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	if((GET_BIT(UCSRA,UCSRA_UDRE))==1)  /*Check if UDR is Empty*/
     5c4:	eb e2       	ldi	r30, 0x2B	; 43
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	82 95       	swap	r24
     5cc:	86 95       	lsr	r24
     5ce:	87 70       	andi	r24, 0x07	; 7
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	81 70       	andi	r24, 0x01	; 1
     5d6:	90 70       	andi	r25, 0x00	; 0
     5d8:	88 23       	and	r24, r24
     5da:	41 f0       	breq	.+16     	; 0x5ec <__vector_13+0x46>
	{
		*G_sendData2 = UDR;   /*Getting Value in UDR*/
     5dc:	e0 91 6e 00 	lds	r30, 0x006E
     5e0:	f0 91 6f 00 	lds	r31, 0x006F
     5e4:	ac e2       	ldi	r26, 0x2C	; 44
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8c 91       	ld	r24, X
     5ea:	80 83       	st	Z, r24
	}

	CLR_BIT(UCSRB,UCSRB_RXCIE); /*Disable Interrupt*/
     5ec:	aa e2       	ldi	r26, 0x2A	; 42
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	ea e2       	ldi	r30, 0x2A	; 42
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	8c 93       	st	X, r24

}
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <Timer_Init>:
/*Description: Timer/Counter Initialization
 * Input     : Timer_Configuration_S* Confg_S (Struct contain : Timer Channel, Pre-scaler, Timer mode , Mode as described in Struct)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	00 d0       	rcall	.+0      	; 0x61a <Timer_Init+0x6>
     61a:	00 d0       	rcall	.+0      	; 0x61c <Timer_Init+0x8>
     61c:	0f 92       	push	r0
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	9b 83       	std	Y+3, r25	; 0x03
     624:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status : No Error*/
     626:	19 82       	std	Y+1, r1	; 0x01

	/*______________________Check Channel________________________________________________________________*/
	switch(Confg_S->Timer_Channel)                /*Check Timer Channel (Timer0 , Timer1, Timer2)*/
     628:	ea 81       	ldd	r30, Y+2	; 0x02
     62a:	fb 81       	ldd	r31, Y+3	; 0x03
     62c:	80 81       	ld	r24, Z
     62e:	28 2f       	mov	r18, r24
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	3d 83       	std	Y+5, r19	; 0x05
     634:	2c 83       	std	Y+4, r18	; 0x04
     636:	8c 81       	ldd	r24, Y+4	; 0x04
     638:	9d 81       	ldd	r25, Y+5	; 0x05
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	91 05       	cpc	r25, r1
     63e:	71 f1       	breq	.+92     	; 0x69c <Timer_Init+0x88>
     640:	2c 81       	ldd	r18, Y+4	; 0x04
     642:	3d 81       	ldd	r19, Y+5	; 0x05
     644:	22 30       	cpi	r18, 0x02	; 2
     646:	31 05       	cpc	r19, r1
     648:	09 f4       	brne	.+2      	; 0x64c <Timer_Init+0x38>
     64a:	4b c0       	rjmp	.+150    	; 0x6e2 <Timer_Init+0xce>
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	9d 81       	ldd	r25, Y+5	; 0x05
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	09 f0       	breq	.+2      	; 0x656 <Timer_Init+0x42>
     654:	69 c0       	rjmp	.+210    	; 0x728 <Timer_Init+0x114>
	{
		case TIMER0:                              /*In case Timer0*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
     656:	ea 81       	ldd	r30, Y+2	; 0x02
     658:	fb 81       	ldd	r31, Y+3	; 0x03
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	00 96       	adiw	r24, 0x00	; 0
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	91 05       	cpc	r25, r1
     666:	30 f4       	brcc	.+12     	; 0x674 <Timer_Init+0x60>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER0] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
     668:	ea 81       	ldd	r30, Y+2	; 0x02
     66a:	fb 81       	ldd	r31, Y+3	; 0x03
     66c:	81 81       	ldd	r24, Z+1	; 0x01
     66e:	80 93 67 00 	sts	0x0067, r24
     672:	02 c0       	rjmp	.+4      	; 0x678 <Timer_Init+0x64>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
     678:	ea 81       	ldd	r30, Y+2	; 0x02
     67a:	fb 81       	ldd	r31, Y+3	; 0x03
     67c:	83 81       	ldd	r24, Z+3	; 0x03
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	00 96       	adiw	r24, 0x00	; 0
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	91 05       	cpc	r25, r1
     688:	30 f4       	brcc	.+12     	; 0x696 <Timer_Init+0x82>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER0] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
     68a:	ea 81       	ldd	r30, Y+2	; 0x02
     68c:	fb 81       	ldd	r31, Y+3	; 0x03
     68e:	83 81       	ldd	r24, Z+3	; 0x03
     690:	80 93 6a 00 	sts	0x006A, r24
     694:	4b c0       	rjmp	.+150    	; 0x72c <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	48 c0       	rjmp	.+144    	; 0x72c <Timer_Init+0x118>
			/*__________________________________________________________________________________________________________*/
			break;

		case TIMER1:   /*In Case Timer1*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
     69c:	ea 81       	ldd	r30, Y+2	; 0x02
     69e:	fb 81       	ldd	r31, Y+3	; 0x03
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	00 96       	adiw	r24, 0x00	; 0
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	91 05       	cpc	r25, r1
     6ac:	30 f4       	brcc	.+12     	; 0x6ba <Timer_Init+0xa6>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER1] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
     6ae:	ea 81       	ldd	r30, Y+2	; 0x02
     6b0:	fb 81       	ldd	r31, Y+3	; 0x03
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	80 93 68 00 	sts	0x0068, r24
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <Timer_Init+0xaa>
					break;

				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
     6be:	ea 81       	ldd	r30, Y+2	; 0x02
     6c0:	fb 81       	ldd	r31, Y+3	; 0x03
     6c2:	83 81       	ldd	r24, Z+3	; 0x03
     6c4:	88 2f       	mov	r24, r24
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	00 96       	adiw	r24, 0x00	; 0
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	91 05       	cpc	r25, r1
     6ce:	30 f4       	brcc	.+12     	; 0x6dc <Timer_Init+0xc8>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER1] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
     6d0:	ea 81       	ldd	r30, Y+2	; 0x02
     6d2:	fb 81       	ldd	r31, Y+3	; 0x03
     6d4:	83 81       	ldd	r24, Z+3	; 0x03
     6d6:	80 93 6b 00 	sts	0x006B, r24
     6da:	28 c0       	rjmp	.+80     	; 0x72c <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	25 c0       	rjmp	.+74     	; 0x72c <Timer_Init+0x118>
			/*__________________________________________________________________________________________________________*/
			break;

		case TIMER2:   /* In Case Timer2*/
			/*_______________________Check Timer Mode________________________________________________________________*/
			switch(Confg_S -> Timer_Mode)         /*Check if Selected Mode is Counter or Timer*/
     6e2:	ea 81       	ldd	r30, Y+2	; 0x02
     6e4:	fb 81       	ldd	r31, Y+3	; 0x03
     6e6:	82 81       	ldd	r24, Z+2	; 0x02
     6e8:	88 2f       	mov	r24, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	00 96       	adiw	r24, 0x00	; 0
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	91 05       	cpc	r25, r1
     6f2:	30 f4       	brcc	.+12     	; 0x700 <Timer_Init+0xec>
			{
				case TIMER_MODE :case COUNTER_MODE :
					GSA_uint8_Prescaler_Timer[TIMER2] = Confg_S ->Timer_Psc;  /*Set Pre-scaler to send it To Start Function*/
     6f4:	ea 81       	ldd	r30, Y+2	; 0x02
     6f6:	fb 81       	ldd	r31, Y+3	; 0x03
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	80 93 69 00 	sts	0x0069, r24
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <Timer_Init+0xf0>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			/*________________________________________________________________________________________________________*/

			/*_____________________Check OverFlow Mode________________________________________________________________*/
			switch(Confg_S -> Interrupt_Mode)             /*Check If Chosen OverFlow mode is Polling or Interrupt*/
     704:	ea 81       	ldd	r30, Y+2	; 0x02
     706:	fb 81       	ldd	r31, Y+3	; 0x03
     708:	83 81       	ldd	r24, Z+3	; 0x03
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	00 96       	adiw	r24, 0x00	; 0
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	91 05       	cpc	r25, r1
     714:	30 f4       	brcc	.+12     	; 0x722 <Timer_Init+0x10e>
			{
				case POLLING :case INTERRUPT :
					GSA_uint8_Mode_Timer[TIMER2] = Confg_S ->Interrupt_Mode;  /*Set Mode to send it to Start Timer Function*/
     716:	ea 81       	ldd	r30, Y+2	; 0x02
     718:	fb 81       	ldd	r31, Y+3	; 0x03
     71a:	83 81       	ldd	r24, Z+3	; 0x03
     71c:	80 93 6c 00 	sts	0x006C, r24
     720:	05 c0       	rjmp	.+10     	; 0x72c <Timer_Init+0x118>
					break;
				default :
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Return Error*/
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	02 c0       	rjmp	.+4      	; 0x72c <Timer_Init+0x118>
					break;
			}
			/*__________________________________________________________________________________________________________*/
			break;
		default :
			Local_uint8_ErrorStatus = ERROR_NOK;  /*Return Error*/
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	89 83       	std	Y+1, r24	; 0x01
			break;
		/*___________________________________________________________________________________________________________________*/

	}

	return Local_uint8_ErrorStatus;   /*Return Error Status*/
     72c:	89 81       	ldd	r24, Y+1	; 0x01
}
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	08 95       	ret

0000073e <Timer_Start>:
/*Description: Timer/Counter Start
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), Tick Counting (Counts given by user)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2c 97       	sbiw	r28, 0x0c	; 12
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	8a 83       	std	Y+2, r24	; 0x02
     754:	4b 83       	std	Y+3, r20	; 0x03
     756:	5c 83       	std	Y+4, r21	; 0x04
     758:	6d 83       	std	Y+5, r22	; 0x05
     75a:	7e 83       	std	Y+6, r23	; 0x06

	/*_____________________Variables________________________________________________________________________________*/
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;
     75c:	19 82       	std	Y+1, r1	; 0x01
	/*______________________________________________________________________________________________________________*/

	switch(Copy_uint8_TimerChannel)                                       /*Check Channel Entered*/
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	28 2f       	mov	r18, r24
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	3c 87       	std	Y+12, r19	; 0x0c
     766:	2b 87       	std	Y+11, r18	; 0x0b
     768:	8b 85       	ldd	r24, Y+11	; 0x0b
     76a:	9c 85       	ldd	r25, Y+12	; 0x0c
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	39 f0       	breq	.+14     	; 0x77e <Timer_Start+0x40>
     770:	2b 85       	ldd	r18, Y+11	; 0x0b
     772:	3c 85       	ldd	r19, Y+12	; 0x0c
     774:	21 30       	cpi	r18, 0x01	; 1
     776:	31 05       	cpc	r19, r1
     778:	09 f4       	brne	.+2      	; 0x77c <Timer_Start+0x3e>
     77a:	75 c0       	rjmp	.+234    	; 0x866 <__stack+0x7>
     77c:	db c0       	rjmp	.+438    	; 0x934 <__stack+0xd5>
	{
	/*_________________________________Timer Channels________________________________________________________________*/
		case TIMER0 :                                  /*In Case of Timer 0*/
			if(Copy_uint32_TickCounts < TIMER0_OVERFLOW)
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	ad 81       	ldd	r26, Y+5	; 0x05
     784:	be 81       	ldd	r27, Y+6	; 0x06
     786:	8f 3f       	cpi	r24, 0xFF	; 255
     788:	91 05       	cpc	r25, r1
     78a:	a1 05       	cpc	r26, r1
     78c:	b1 05       	cpc	r27, r1
     78e:	08 f0       	brcs	.+2      	; 0x792 <Timer_Start+0x54>
     790:	67 c0       	rjmp	.+206    	; 0x860 <__stack+0x1>
			{
				/*TIMER0_COUNTER_REGISTER = TIMER0_OVERFLOW - Copy_uint32_TickCounts;*/
				switch(GSA_uint8_Mode_Timer[TIMER0])                /*Check Timer Mode*/
     792:	80 91 6a 00 	lds	r24, 0x006A
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	3a 87       	std	Y+10, r19	; 0x0a
     79c:	29 87       	std	Y+9, r18	; 0x09
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <Timer_Start+0x74>
     7a6:	29 85       	ldd	r18, Y+9	; 0x09
     7a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     7aa:	21 30       	cpi	r18, 0x01	; 1
     7ac:	31 05       	cpc	r19, r1
     7ae:	21 f1       	breq	.+72     	; 0x7f8 <Timer_Start+0xba>
     7b0:	54 c0       	rjmp	.+168    	; 0x85a <Timer_Start+0x11c>
				{
				/*________________________________Timer Mode_____________________________________________________________*/
					case POLLING :                         /*If Selected Mode is Polling*/
						SET_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_1);
     7b2:	a3 e5       	ldi	r26, 0x53	; 83
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e3 e5       	ldi	r30, 0x53	; 83
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	88 60       	ori	r24, 0x08	; 8
     7be:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
     7c0:	a3 e5       	ldi	r26, 0x53	; 83
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e3 e5       	ldi	r30, 0x53	; 83
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	88 7f       	andi	r24, 0xF8	; 248
     7cc:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER0];  /*Use Pre-scaler Entered by user*/
     7ce:	a3 e5       	ldi	r26, 0x53	; 83
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	e3 e5       	ldi	r30, 0x53	; 83
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	90 81       	ld	r25, Z
     7d8:	80 91 67 00 	lds	r24, 0x0067
     7dc:	89 2b       	or	r24, r25
     7de:	8c 93       	st	X, r24
						SET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_OVERFLOW_FLAG_BIT);
     7e0:	a8 e5       	ldi	r26, 0x58	; 88
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	e8 e5       	ldi	r30, 0x58	; 88
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	8c 93       	st	X, r24
						TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint32_TickCounts;
     7ee:	ec e5       	ldi	r30, 0x5C	; 92
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	80 83       	st	Z, r24
     7f6:	a0 c0       	rjmp	.+320    	; 0x938 <__stack+0xd9>
						break;
					case INTERRUPT:
						SET_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_1);
     7f8:	a3 e5       	ldi	r26, 0x53	; 83
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	e3 e5       	ldi	r30, 0x53	; 83
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	88 60       	ori	r24, 0x08	; 8
     804:	8c 93       	st	X, r24
						CLR_BIT(TIMER0_CONTROL_REGISTER,TIMER0_CONTROL_WAVEGENERATION_0);
     806:	a3 e5       	ldi	r26, 0x53	; 83
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e3 e5       	ldi	r30, 0x53	; 83
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8f 7b       	andi	r24, 0xBF	; 191
     812:	8c 93       	st	X, r24
						/*SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER,TIMER0_INTERRUPT_OVERFLOW_ENABLE_BIT);*/ /*Enable OverFlow Interrupt*/
						SET_BIT(STATUS_REGISTER,GLOBAL_INTERRUPT_BIT);   /*Enable Global Interrupt*/
     814:	af e5       	ldi	r26, 0x5F	; 95
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	ef e5       	ldi	r30, 0x5F	; 95
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	80 68       	ori	r24, 0x80	; 128
     820:	8c 93       	st	X, r24
						SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER,TIMER0_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
     822:	a9 e5       	ldi	r26, 0x59	; 89
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e9 e5       	ldi	r30, 0x59	; 89
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
     830:	a3 e5       	ldi	r26, 0x53	; 83
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e3 e5       	ldi	r30, 0x53	; 83
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	88 7f       	andi	r24, 0xF8	; 248
     83c:	8c 93       	st	X, r24
						TIMER0_CONTROL_REGISTER |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER0];  /*Use Pre-scaler Entered by user*/
     83e:	a3 e5       	ldi	r26, 0x53	; 83
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	e3 e5       	ldi	r30, 0x53	; 83
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	90 81       	ld	r25, Z
     848:	80 91 67 00 	lds	r24, 0x0067
     84c:	89 2b       	or	r24, r25
     84e:	8c 93       	st	X, r24
						TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint32_TickCounts;
     850:	ec e5       	ldi	r30, 0x5C	; 92
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	80 83       	st	Z, r24
     858:	6f c0       	rjmp	.+222    	; 0x938 <__stack+0xd9>
						break;
					default:
						Local_uint8_ErrorStatus = ERROR_NOK;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	6c c0       	rjmp	.+216    	; 0x938 <__stack+0xd9>
				/*_________________________________________________________________________________________________________________*/
				}
			}
			else
			{
				Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	69 c0       	rjmp	.+210    	; 0x938 <__stack+0xd9>
			}
		break;
		case TIMER1 :                                  /*In Case of Timer 0*/
			if(Copy_uint32_TickCounts < TIMER1_OVERFLOW)
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	ad 81       	ldd	r26, Y+5	; 0x05
     86c:	be 81       	ldd	r27, Y+6	; 0x06
     86e:	80 30       	cpi	r24, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	93 07       	cpc	r25, r19
     874:	31 e0       	ldi	r19, 0x01	; 1
     876:	a3 07       	cpc	r26, r19
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	b3 07       	cpc	r27, r19
     87c:	08 f0       	brcs	.+2      	; 0x880 <__stack+0x21>
     87e:	57 c0       	rjmp	.+174    	; 0x92e <__stack+0xcf>
			{
					TIMER1_COUNTER_REGISTER = TIMER1_OVERFLOW - Copy_uint32_TickCounts;
     880:	ec e4       	ldi	r30, 0x4C	; 76
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	90 95       	com	r25
     88a:	81 95       	neg	r24
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
						switch(GSA_uint8_Mode_Timer[TIMER1])                /*Check Timer Mode*/
     892:	80 91 6b 00 	lds	r24, 0x006B
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	38 87       	std	Y+8, r19	; 0x08
     89c:	2f 83       	std	Y+7, r18	; 0x07
     89e:	8f 81       	ldd	r24, Y+7	; 0x07
     8a0:	98 85       	ldd	r25, Y+8	; 0x08
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	31 f0       	breq	.+12     	; 0x8b2 <__stack+0x53>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	21 30       	cpi	r18, 0x01	; 1
     8ac:	31 05       	cpc	r19, r1
     8ae:	e9 f0       	breq	.+58     	; 0x8ea <__stack+0x8b>
     8b0:	3b c0       	rjmp	.+118    	; 0x928 <__stack+0xc9>
						{
						/*________________________________Timer Mode_____________________________________________________________*/
							case POLLING :                         /*If Selected Mode is Polling*/
								TIMER1_CONTROL_REGISTER_B &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
     8b2:	ae e4       	ldi	r26, 0x4E	; 78
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ee e4       	ldi	r30, 0x4E	; 78
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	88 7f       	andi	r24, 0xF8	; 248
     8be:	8c 93       	st	X, r24
								TIMER1_CONTROL_REGISTER_B |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER1];  /*Use Pre-scaler Entered by user*/
     8c0:	ae e4       	ldi	r26, 0x4E	; 78
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	ee e4       	ldi	r30, 0x4E	; 78
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	90 81       	ld	r25, Z
     8ca:	80 91 68 00 	lds	r24, 0x0068
     8ce:	89 2b       	or	r24, r25
     8d0:	8c 93       	st	X, r24
								SET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER,TIMER1_INTERRUPT_OVERFLOW_FLAG_BIT);
     8d2:	a8 e5       	ldi	r26, 0x58	; 88
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e8 e5       	ldi	r30, 0x58	; 88
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	84 60       	ori	r24, 0x04	; 4
     8de:	8c 93       	st	X, r24
								TIMER1_COUNTER_REGISTER = RESET_COUNTER;
     8e0:	ec e4       	ldi	r30, 0x4C	; 76
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	11 82       	std	Z+1, r1	; 0x01
     8e6:	10 82       	st	Z, r1
     8e8:	27 c0       	rjmp	.+78     	; 0x938 <__stack+0xd9>
								break;
							case INTERRUPT:
								TIMER1_CONTROL_REGISTER_B &=(uint8_t) CLR_PRE_SCALLER;                     /*Ensure Pre-scaler Bits is cleared*/
     8ea:	ae e4       	ldi	r26, 0x4E	; 78
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	ee e4       	ldi	r30, 0x4E	; 78
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	88 7f       	andi	r24, 0xF8	; 248
     8f6:	8c 93       	st	X, r24
								TIMER1_CONTROL_REGISTER_B |=(uint8_t) GSA_uint8_Prescaler_Timer[TIMER1];  /*Use Pre-scaler Entered by user*/
     8f8:	ae e4       	ldi	r26, 0x4E	; 78
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	ee e4       	ldi	r30, 0x4E	; 78
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	90 81       	ld	r25, Z
     902:	80 91 68 00 	lds	r24, 0x0068
     906:	89 2b       	or	r24, r25
     908:	8c 93       	st	X, r24
								SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_INTERRUPT_OVERFLOW_ENABLE_BIT);   /*Enable OverFlow Interrupt*/
     90a:	a9 e5       	ldi	r26, 0x59	; 89
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e9 e5       	ldi	r30, 0x59	; 89
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	84 60       	ori	r24, 0x04	; 4
     916:	8c 93       	st	X, r24
								SET_BIT(STATUS_REGISTER,GLOBAL_INTERRUPT_BIT);   /*Enable Global Interrupt*/
     918:	af e5       	ldi	r26, 0x5F	; 95
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	ef e5       	ldi	r30, 0x5F	; 95
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	80 68       	ori	r24, 0x80	; 128
     924:	8c 93       	st	X, r24
     926:	08 c0       	rjmp	.+16     	; 0x938 <__stack+0xd9>

								break;
							default:
								Local_uint8_ErrorStatus = ERROR_NOK;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	05 c0       	rjmp	.+10     	; 0x938 <__stack+0xd9>
						/*_________________________________________________________________________________________________________________*/
						}
					}
					else
					{
						Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
					}
				break;
		default:
				Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return Local_uint8_ErrorStatus; /*Return Error Status*/
     938:	89 81       	ldd	r24, Y+1	; 0x01
}
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	cf 91       	pop	r28
     948:	df 91       	pop	r29
     94a:	08 95       	ret

0000094c <Timer_Stop>:
/*Description: Timer/Counter Stop
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Stop(uint8_t Copy_uint8_TimerChannel)
{
     94c:	df 93       	push	r29
     94e:	cf 93       	push	r28
     950:	00 d0       	rcall	.+0      	; 0x952 <Timer_Stop+0x6>
     952:	00 d0       	rcall	.+0      	; 0x954 <Timer_Stop+0x8>
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK; /*Error Status : No Error*/
     95a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_uint8_TimerChannel)
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	3c 83       	std	Y+4, r19	; 0x04
     964:	2b 83       	std	Y+3, r18	; 0x03
     966:	8b 81       	ldd	r24, Y+3	; 0x03
     968:	9c 81       	ldd	r25, Y+4	; 0x04
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	31 f0       	breq	.+12     	; 0x97a <Timer_Stop+0x2e>
     96e:	2b 81       	ldd	r18, Y+3	; 0x03
     970:	3c 81       	ldd	r19, Y+4	; 0x04
     972:	21 30       	cpi	r18, 0x01	; 1
     974:	31 05       	cpc	r19, r1
     976:	49 f0       	breq	.+18     	; 0x98a <Timer_Stop+0x3e>
     978:	10 c0       	rjmp	.+32     	; 0x99a <Timer_Stop+0x4e>
	{
		case TIMER0 :
			TIMER0_CONTROL_REGISTER &= (uint8_t) CLR_PRE_SCALLER; /*Stop Pre Scaler*/
     97a:	a3 e5       	ldi	r26, 0x53	; 83
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e3 e5       	ldi	r30, 0x53	; 83
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	88 7f       	andi	r24, 0xF8	; 248
     986:	8c 93       	st	X, r24
     988:	0a c0       	rjmp	.+20     	; 0x99e <Timer_Stop+0x52>
			break;
		case TIMER1 :
			TIMER1_CONTROL_REGISTER_B &= (uint8_t) CLR_PRE_SCALLER; /*Stop Pre Scaler*/
     98a:	ae e4       	ldi	r26, 0x4E	; 78
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	ee e4       	ldi	r30, 0x4E	; 78
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	88 7f       	andi	r24, 0xF8	; 248
     996:	8c 93       	st	X, r24
     998:	02 c0       	rjmp	.+4      	; 0x99e <Timer_Stop+0x52>
			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8_ErrorStatus; /*Return Error Status*/
     99e:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <Timer_Reset>:
/*Description: Timer Reset
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Reset(uint8_t Copy_uint8_TimerChannel)
{
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <Timer_Reset+0x6>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <Timer_Reset+0x8>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status : No Error*/
     9bc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_uint8_TimerChannel)
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	3c 83       	std	Y+4, r19	; 0x04
     9c6:	2b 83       	std	Y+3, r18	; 0x03
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	31 f0       	breq	.+12     	; 0x9dc <Timer_Reset+0x2e>
     9d0:	2b 81       	ldd	r18, Y+3	; 0x03
     9d2:	3c 81       	ldd	r19, Y+4	; 0x04
     9d4:	21 30       	cpi	r18, 0x01	; 1
     9d6:	31 05       	cpc	r19, r1
     9d8:	29 f0       	breq	.+10     	; 0x9e4 <Timer_Reset+0x36>
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <Timer_Reset+0x40>
	{
		case TIMER0 :
			TIMER0_COUNTER_REGISTER = RESET_COUNTER; /*Reset Counter */
     9dc:	e2 e5       	ldi	r30, 0x52	; 82
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	10 82       	st	Z, r1
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <Timer_Reset+0x44>
			break;
		case TIMER1 :
			TIMER1_COUNTER_REGISTER = RESET_COUNTER; /*Reset Counter */
     9e4:	ec e4       	ldi	r30, 0x4C	; 76
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	11 82       	std	Z+1, r1	; 0x01
     9ea:	10 82       	st	Z, r1
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <Timer_Reset+0x44>

			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK; /*Error Status : Error*/
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8_ErrorStatus; /*Return Error Status*/
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	08 95       	ret

00000a02 <Timer_Get_TickTime>:
/*Description: Get Timer Tick Time value to use it by user
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *Timer_Time (Pointer to return Value)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Get_TickTime(uint8_t Copy_uint8_TimerChannel, uint32_t *Copy_uint8Ptr_TimerTickTime)
{
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	00 d0       	rcall	.+0      	; 0xa08 <Timer_Get_TickTime+0x6>
     a08:	00 d0       	rcall	.+0      	; 0xa0a <Timer_Get_TickTime+0x8>
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <Timer_Get_TickTime+0xa>
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	8a 83       	std	Y+2, r24	; 0x02
     a12:	7c 83       	std	Y+4, r23	; 0x04
     a14:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;  /*Error Status :No Error*/
     a16:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Ptr_TimerTickTime == NULL_POINTER)
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	19 f4       	brne	.+6      	; 0xa26 <Timer_Get_TickTime+0x24>
	{
		Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	a6 c0       	rjmp	.+332    	; 0xb72 <Timer_Get_TickTime+0x170>
	}
	else
	{
		switch(Copy_uint8_TimerChannel)
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	3e 83       	std	Y+6, r19	; 0x06
     a2e:	2d 83       	std	Y+5, r18	; 0x05
     a30:	8d 81       	ldd	r24, Y+5	; 0x05
     a32:	9e 81       	ldd	r25, Y+6	; 0x06
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	39 f0       	breq	.+14     	; 0xa46 <Timer_Get_TickTime+0x44>
     a38:	2d 81       	ldd	r18, Y+5	; 0x05
     a3a:	3e 81       	ldd	r19, Y+6	; 0x06
     a3c:	21 30       	cpi	r18, 0x01	; 1
     a3e:	31 05       	cpc	r19, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <Timer_Get_TickTime+0x42>
     a42:	4b c0       	rjmp	.+150    	; 0xada <Timer_Get_TickTime+0xd8>
     a44:	94 c0       	rjmp	.+296    	; 0xb6e <Timer_Get_TickTime+0x16c>
		{
			case TIMER0 :
				if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_TIMER_0)
     a46:	80 91 67 00 	lds	r24, 0x0067
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	39 f4       	brne	.+14     	; 0xa5c <Timer_Get_TickTime+0x5a>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_SYSTEM_CLOCK_US;   /*Pre Scaler = System Clock*/
     a4e:	eb 81       	ldd	r30, Y+3	; 0x03
     a50:	fc 81       	ldd	r31, Y+4	; 0x04
     a52:	10 82       	st	Z, r1
     a54:	11 82       	std	Z+1, r1	; 0x01
     a56:	12 82       	std	Z+2, r1	; 0x02
     a58:	13 82       	std	Z+3, r1	; 0x03
     a5a:	8b c0       	rjmp	.+278    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_8_TIMER_0)
     a5c:	80 91 67 00 	lds	r24, 0x0067
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	59 f4       	brne	.+22     	; 0xa7a <Timer_Get_TickTime+0x78>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_8_US;   /*Pre Scaler = System Clock/8 */
     a64:	eb 81       	ldd	r30, Y+3	; 0x03
     a66:	fc 81       	ldd	r31, Y+4	; 0x04
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	80 83       	st	Z, r24
     a72:	91 83       	std	Z+1, r25	; 0x01
     a74:	a2 83       	std	Z+2, r26	; 0x02
     a76:	b3 83       	std	Z+3, r27	; 0x03
     a78:	7c c0       	rjmp	.+248    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_64_TIMER_0)
     a7a:	80 91 67 00 	lds	r24, 0x0067
     a7e:	83 30       	cpi	r24, 0x03	; 3
     a80:	59 f4       	brne	.+22     	; 0xa98 <Timer_Get_TickTime+0x96>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_64_US;   /*Pre Scaler = System Clock/64 */
     a82:	eb 81       	ldd	r30, Y+3	; 0x03
     a84:	fc 81       	ldd	r31, Y+4	; 0x04
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	80 83       	st	Z, r24
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	a2 83       	std	Z+2, r26	; 0x02
     a94:	b3 83       	std	Z+3, r27	; 0x03
     a96:	6d c0       	rjmp	.+218    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_256_TIMER_0)
     a98:	80 91 67 00 	lds	r24, 0x0067
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	59 f4       	brne	.+22     	; 0xab6 <Timer_Get_TickTime+0xb4>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_256_US;   /*Pre Scaler = System Clock/256 */
     aa0:	eb 81       	ldd	r30, Y+3	; 0x03
     aa2:	fc 81       	ldd	r31, Y+4	; 0x04
     aa4:	80 e2       	ldi	r24, 0x20	; 32
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	80 83       	st	Z, r24
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	a2 83       	std	Z+2, r26	; 0x02
     ab2:	b3 83       	std	Z+3, r27	; 0x03
     ab4:	5e c0       	rjmp	.+188    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER0] == F_CPU_CLOCK_1024_TIMER_0)
     ab6:	80 91 67 00 	lds	r24, 0x0067
     aba:	85 30       	cpi	r24, 0x05	; 5
     abc:	59 f4       	brne	.+22     	; 0xad4 <Timer_Get_TickTime+0xd2>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_1024_US;   /*Pre Scaler = System Clock/1024 */
     abe:	eb 81       	ldd	r30, Y+3	; 0x03
     ac0:	fc 81       	ldd	r31, Y+4	; 0x04
     ac2:	8d e7       	ldi	r24, 0x7D	; 125
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	80 83       	st	Z, r24
     acc:	91 83       	std	Z+1, r25	; 0x01
     ace:	a2 83       	std	Z+2, r26	; 0x02
     ad0:	b3 83       	std	Z+3, r27	; 0x03
     ad2:	4f c0       	rjmp	.+158    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else
				{
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	4c c0       	rjmp	.+152    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				break;
			case TIMER1 :
				if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_TIMER_1)
     ada:	80 91 68 00 	lds	r24, 0x0068
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	39 f4       	brne	.+14     	; 0xaf0 <Timer_Get_TickTime+0xee>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_SYSTEM_CLOCK_US;   /*Pre Scaler = System Clock*/
     ae2:	eb 81       	ldd	r30, Y+3	; 0x03
     ae4:	fc 81       	ldd	r31, Y+4	; 0x04
     ae6:	10 82       	st	Z, r1
     ae8:	11 82       	std	Z+1, r1	; 0x01
     aea:	12 82       	std	Z+2, r1	; 0x02
     aec:	13 82       	std	Z+3, r1	; 0x03
     aee:	41 c0       	rjmp	.+130    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_8_TIMER_1)
     af0:	80 91 68 00 	lds	r24, 0x0068
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	59 f4       	brne	.+22     	; 0xb0e <Timer_Get_TickTime+0x10c>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_8_US;   /*Pre Scaler = System Clock/8 */
     af8:	eb 81       	ldd	r30, Y+3	; 0x03
     afa:	fc 81       	ldd	r31, Y+4	; 0x04
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	80 83       	st	Z, r24
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	a2 83       	std	Z+2, r26	; 0x02
     b0a:	b3 83       	std	Z+3, r27	; 0x03
     b0c:	32 c0       	rjmp	.+100    	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_64_TIMER_1)
     b0e:	80 91 68 00 	lds	r24, 0x0068
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	59 f4       	brne	.+22     	; 0xb2c <Timer_Get_TickTime+0x12a>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_64_US;   /*Pre Scaler = System Clock/64 */
     b16:	eb 81       	ldd	r30, Y+3	; 0x03
     b18:	fc 81       	ldd	r31, Y+4	; 0x04
     b1a:	88 e0       	ldi	r24, 0x08	; 8
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	80 83       	st	Z, r24
     b24:	91 83       	std	Z+1, r25	; 0x01
     b26:	a2 83       	std	Z+2, r26	; 0x02
     b28:	b3 83       	std	Z+3, r27	; 0x03
     b2a:	23 c0       	rjmp	.+70     	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_256_TIMER_1)
     b2c:	80 91 68 00 	lds	r24, 0x0068
     b30:	84 30       	cpi	r24, 0x04	; 4
     b32:	59 f4       	brne	.+22     	; 0xb4a <Timer_Get_TickTime+0x148>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_256_US;   /*Pre Scaler = System Clock/256 */
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	80 83       	st	Z, r24
     b42:	91 83       	std	Z+1, r25	; 0x01
     b44:	a2 83       	std	Z+2, r26	; 0x02
     b46:	b3 83       	std	Z+3, r27	; 0x03
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else if(GSA_uint8_Prescaler_Timer[TIMER1] == F_CPU_CLOCK_1024_TIMER_1)
     b4a:	80 91 68 00 	lds	r24, 0x0068
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	59 f4       	brne	.+22     	; 0xb68 <Timer_Get_TickTime+0x166>
				{
					*Copy_uint8Ptr_TimerTickTime = TICKTIME_1024_US;   /*Pre Scaler = System Clock/1024 */
     b52:	eb 81       	ldd	r30, Y+3	; 0x03
     b54:	fc 81       	ldd	r31, Y+4	; 0x04
     b56:	8d e7       	ldi	r24, 0x7D	; 125
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				else
				{
					Local_uint8_ErrorStatus = ERROR_NOK;   /*Error Status : Error*/
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <Timer_Get_TickTime+0x170>
				}
				break;
			default:
				Local_uint8_ErrorStatus = ERROR_NOK;     /*Error Status : Error*/
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	89 83       	std	Y+1, r24	; 0x01
		}
	}

		return Local_uint8_ErrorStatus; /*Return Error Status*/
     b72:	89 81       	ldd	r24, Y+1	; 0x01
}
     b74:	26 96       	adiw	r28, 0x06	; 6
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <Timer_Get_FlagStatus>:
/*Description: Get Timer Flag Status
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *FlagStatus (Pointer to Flag)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
extern uint8_t Timer_Get_FlagStatus(uint8_t Copy_uint8_TimerChannel, uint8_t *Copy_uint8Ptr_FlagStatus)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <Timer_Get_FlagStatus+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <Timer_Get_FlagStatus+0x8>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <Timer_Get_FlagStatus+0xa>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	7c 83       	std	Y+4, r23	; 0x04
     b98:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_uint8_ErrorStatus = ERROR_OK;        /*Error status : No Error */
     b9a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Ptr_FlagStatus == NULL_POINTER)       /*Check if pointer points to NULL*/
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	11 f4       	brne	.+4      	; 0xba8 <Timer_Get_FlagStatus+0x22>
	{
		Local_uint8_ErrorStatus = ERROR_NOK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(Copy_uint8_TimerChannel)
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	3e 83       	std	Y+6, r19	; 0x06
     bb0:	2d 83       	std	Y+5, r18	; 0x05
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	31 f0       	breq	.+12     	; 0xbc6 <Timer_Get_FlagStatus+0x40>
     bba:	2d 81       	ldd	r18, Y+5	; 0x05
     bbc:	3e 81       	ldd	r19, Y+6	; 0x06
     bbe:	21 30       	cpi	r18, 0x01	; 1
     bc0:	31 05       	cpc	r19, r1
     bc2:	51 f0       	breq	.+20     	; 0xbd8 <Timer_Get_FlagStatus+0x52>
     bc4:	13 c0       	rjmp	.+38     	; 0xbec <Timer_Get_FlagStatus+0x66>
	{
		case TIMER0 :
			/**Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_OVERFLOW_FLAG_BIT);*/ /*Read Flag*/
			*Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER0_INTERRUPT_FLAG_REGISTER,TIMER0_INTERRUPT_COMPARE_MATCH_FLAG_BIT);
     bc6:	e8 e5       	ldi	r30, 0x58	; 88
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	86 95       	lsr	r24
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	80 83       	st	Z, r24
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <Timer_Get_FlagStatus+0x6a>
			break;
		case TIMER1 :
			*Copy_uint8Ptr_FlagStatus = GET_BIT(TIMER1_INTERRUPT_FLAG_REGISTER,TIMER1_INTERRUPT_OVERFLOW_FLAG_BIT); /*Read Flag*/
     bd8:	e8 e5       	ldi	r30, 0x58	; 88
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	86 95       	lsr	r24
     be0:	86 95       	lsr	r24
     be2:	81 70       	andi	r24, 0x01	; 1
     be4:	eb 81       	ldd	r30, Y+3	; 0x03
     be6:	fc 81       	ldd	r31, Y+4	; 0x04
     be8:	80 83       	st	Z, r24
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <Timer_Get_FlagStatus+0x6a>
			break;
		default:
			Local_uint8_ErrorStatus = ERROR_NOK;  /*Error status : Error */
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_uint8_ErrorStatus;  /*Return Error*/
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	26 96       	adiw	r28, 0x06	; 6
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <TIMER_SetCallBack>:

uint8_t TIMER_SetCallBack(uint8_t Copy_uint8_TimerChannel,void (*Copy_FunctionAddress)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <TIMER_SetCallBack+0x6>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <TIMER_SetCallBack+0x8>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	8a 83       	std	Y+2, r24	; 0x02
     c12:	7c 83       	std	Y+4, r23	; 0x04
     c14:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8ErrorState=0;              //Error State: No Error
     c16:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_FunctionAddress==NULL_POINTER) //check if pointer points to Nothing
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	19 f4       	brne	.+6      	; 0xc26 <TIMER_SetCallBack+0x22>
	{
		Local_u8ErrorState=1;             //Error State : Error
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <TIMER_SetCallBack+0x3e>
	}
	else
	{
		switch(Copy_uint8_TimerChannel)                   //Switch on INT
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	39 f4       	brne	.+14     	; 0xc3e <TIMER_SetCallBack+0x3a>
		{
			case TIMER0 :                                 //In Case INT0
				TIMER0_CallBack =Copy_FunctionAddress;//Send Function Address To Call Back pointer
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	90 93 66 00 	sts	0x0066, r25
     c38:	80 93 65 00 	sts	0x0065, r24
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <TIMER_SetCallBack+0x3e>
				break;
			default :
				Local_u8ErrorState=1;  //Error State : Error
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	89 83       	std	Y+1, r24	; 0x01
				break;

		}
	}
	return Local_u8ErrorState; //Return Error State
     c42:	89 81       	ldd	r24, Y+1	; 0x01
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <__vector_10>:
void __vector_10(void)
{
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CallBack!=0)
     c7c:	80 91 65 00 	lds	r24, 0x0065
     c80:	90 91 66 00 	lds	r25, 0x0066
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	29 f0       	breq	.+10     	; 0xc92 <__vector_10+0x40>
	{
		TIMER0_CallBack();
     c88:	e0 91 65 00 	lds	r30, 0x0065
     c8c:	f0 91 66 00 	lds	r31, 0x0066
     c90:	09 95       	icall
	}
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <Sleep_PowerSaveMode>:
#include "SleepModes.h"



extern void Sleep_PowerSaveMode(void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,SM0);
     cc0:	a5 e5       	ldi	r26, 0x55	; 85
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e5       	ldi	r30, 0x55	; 85
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 61       	ori	r24, 0x10	; 16
     ccc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,SM1);
     cce:	a5 e5       	ldi	r26, 0x55	; 85
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e5 e5       	ldi	r30, 0x55	; 85
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 62       	ori	r24, 0x20	; 32
     cda:	8c 93       	st	X, r24
	SET_BIT(MCUCR,SE);
     cdc:	a5 e5       	ldi	r26, 0x55	; 85
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e5 e5       	ldi	r30, 0x55	; 85
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	8c 93       	st	X, r24
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <DIO_u8Init_PORT>:
/*Description: Set PORT Direction (INPUT or OUTPUT)
 * Input     : Copy_u8PortNB (PORT Number) ,  Copy_u8Dir (PORT Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8Init_PORT(uint8_t Copy_u8PortNB,uint8_t Copy_u8Dir)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <DIO_u8Init_PORT+0x6>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <DIO_u8Init_PORT+0x8>
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;          /*Local Error State*/
     d02:	19 82       	std	Y+1, r1	; 0x01
	{
		Local_u8Error=ERROR; /*Error Status : Error*/
	}
	else
	{	
		switch (Copy_u8PortNB)       /*Switch case on PORT Number*/
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3d 83       	std	Y+5, r19	; 0x05
     d0c:	2c 83       	std	Y+4, r18	; 0x04
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	9d 81       	ldd	r25, Y+5	; 0x05
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	d1 f0       	breq	.+52     	; 0xd4c <DIO_u8Init_PORT+0x5c>
     d18:	2c 81       	ldd	r18, Y+4	; 0x04
     d1a:	3d 81       	ldd	r19, Y+5	; 0x05
     d1c:	22 30       	cpi	r18, 0x02	; 2
     d1e:	31 05       	cpc	r19, r1
     d20:	2c f4       	brge	.+10     	; 0xd2c <DIO_u8Init_PORT+0x3c>
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	61 f0       	breq	.+24     	; 0xd42 <DIO_u8Init_PORT+0x52>
     d2a:	1f c0       	rjmp	.+62     	; 0xd6a <DIO_u8Init_PORT+0x7a>
     d2c:	2c 81       	ldd	r18, Y+4	; 0x04
     d2e:	3d 81       	ldd	r19, Y+5	; 0x05
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	81 f0       	breq	.+32     	; 0xd56 <DIO_u8Init_PORT+0x66>
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	91 05       	cpc	r25, r1
     d3e:	81 f0       	breq	.+32     	; 0xd60 <DIO_u8Init_PORT+0x70>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <DIO_u8Init_PORT+0x7a>
		{
			case DIO_PORT_0 :            /*InCase PORTA*/
				DIRECTION_PORT0 = Copy_u8Dir;    /*PORTA DATA Direction*/
     d42:	ea e3       	ldi	r30, 0x3A	; 58
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	80 83       	st	Z, r24
     d4a:	11 c0       	rjmp	.+34     	; 0xd6e <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_1 :            /*InCase PORTB*/
				DIRECTION_PORT1 = Copy_u8Dir;    /*PORTB DATA Direction*/
     d4c:	e7 e3       	ldi	r30, 0x37	; 55
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	80 83       	st	Z, r24
     d54:	0c c0       	rjmp	.+24     	; 0xd6e <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_2 :            /*InCase PORTC*/
				DIRECTION_PORT2 = Copy_u8Dir;    /*PORTC DATA Direction*/
     d56:	e4 e3       	ldi	r30, 0x34	; 52
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	80 83       	st	Z, r24
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <DIO_u8Init_PORT+0x7e>
					break;
			case DIO_PORT_3 :            /*InCase PORTD*/
				DIRECTION_PORT3 = Copy_u8Dir;    /*PORTD DATA Direction*/
     d60:	e1 e3       	ldi	r30, 0x31	; 49
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	80 83       	st	Z, r24
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_u8Init_PORT+0x7e>
					break;
			default :                   /*Other Case Wrong PORT NO*/
					Local_u8Error=ERROR;    /*Error Flag*/
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
	}
	/*Return Error State*/
	return Local_u8Error;    /*if ERROR exist it return 1 if NO ERROR return 0*/
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_u8Init_PIN>:
/*Description: Set PIN Direction (INPUT or OUTPUT)
 * Input     :Copy_u8PinNB (PIN Number) ,  Copy_u8Dir (PIN Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8Init_PIN(uint8_t Copy_u8PinN,uint8_t Copy_u8Dir)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_u8Init_PIN+0x6>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	8a 83       	std	Y+2, r24	; 0x02
     d8e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;              /*Local Error State*/
     d90:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PinN > MAX_PIN_NO)     /*Check if Entered PIN NO. is more Than 7*/
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	80 32       	cpi	r24, 0x20	; 32
     d96:	18 f0       	brcs	.+6      	; 0xd9e <DIO_u8Init_PIN+0x1e>
	{
		Local_u8Error=ERROR;            /*Return ERROR*/
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	b4 c0       	rjmp	.+360    	; 0xf06 <DIO_u8Init_PIN+0x186>
	}
	else if(Copy_u8Dir != DIO_INPUT && Copy_u8Dir != DIO_OUTPUT) /*Check if entered PIN Direction is not INPUT or OUTPUT*/
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 23       	and	r24, r24
     da2:	31 f0       	breq	.+12     	; 0xdb0 <DIO_u8Init_PIN+0x30>
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	19 f0       	breq	.+6      	; 0xdb0 <DIO_u8Init_PIN+0x30>
	{
		Local_u8Error=ERROR;           /*Return ERROR*/
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	ab c0       	rjmp	.+342    	; 0xf06 <DIO_u8Init_PIN+0x186>
	}
	else                          /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
	{
		if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 30       	cpi	r24, 0x08	; 8
     db4:	10 f5       	brcc	.+68     	; 0xdfa <DIO_u8Init_PIN+0x7a>
		{		/*InCase PORTA*/
			ASSIGN_BIT(DIRECTION_PORT0,Copy_u8PinN,Copy_u8Dir);  /*ASSIGN PIN NO to entered Direction*/
     db6:	aa e3       	ldi	r26, 0x3A	; 58
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ea e3       	ldi	r30, 0x3A	; 58
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_u8Init_PIN+0x52>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_u8Init_PIN+0x4e>
     dd6:	80 95       	com	r24
     dd8:	48 23       	and	r20, r24
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	b9 01       	movw	r22, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_u8Init_PIN+0x6e>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	8a 95       	dec	r24
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_u8Init_PIN+0x6a>
     df2:	cb 01       	movw	r24, r22
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	86 c0       	rjmp	.+268    	; 0xf06 <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	48 f1       	brcs	.+82     	; 0xe52 <DIO_u8Init_PIN+0xd2>
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	80 31       	cpi	r24, 0x10	; 16
     e04:	30 f5       	brcc	.+76     	; 0xe52 <DIO_u8Init_PIN+0xd2>
		{
			                                /*InCase PORTB*/
				ASSIGN_BIT(DIRECTION_PORT1,(Copy_u8PinN-PIN_PER_PORT),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 01       	movw	r18, r24
     e1a:	28 50       	subi	r18, 0x08	; 8
     e1c:	30 40       	sbci	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_u8Init_PIN+0xa8>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	2a 95       	dec	r18
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_u8Init_PIN+0xa4>
     e2c:	80 95       	com	r24
     e2e:	48 23       	and	r20, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	08 97       	sbiw	r24, 0x08	; 8
     e3e:	b9 01       	movw	r22, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_u8Init_PIN+0xc6>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	8a 95       	dec	r24
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_u8Init_PIN+0xc2>
     e4a:	cb 01       	movw	r24, r22
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	5a c0       	rjmp	.+180    	; 0xf06 <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	48 f1       	brcs	.+82     	; 0xeaa <DIO_u8Init_PIN+0x12a>
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 31       	cpi	r24, 0x18	; 24
     e5c:	30 f5       	brcc	.+76     	; 0xeaa <DIO_u8Init_PIN+0x12a>
		{
			                               /*InCase PORTC*/
				ASSIGN_BIT(DIRECTION_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9c 01       	movw	r18, r24
     e72:	20 51       	subi	r18, 0x10	; 16
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8Init_PIN+0x100>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	2a 95       	dec	r18
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_u8Init_PIN+0xfc>
     e84:	80 95       	com	r24
     e86:	48 23       	and	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	40 97       	sbiw	r24, 0x10	; 16
     e96:	b9 01       	movw	r22, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_u8Init_PIN+0x11e>
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	8a 95       	dec	r24
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_u8Init_PIN+0x11a>
     ea2:	cb 01       	movw	r24, r22
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	2e c0       	rjmp	.+92     	; 0xf06 <DIO_u8Init_PIN+0x186>
		}
		else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 31       	cpi	r24, 0x18	; 24
     eae:	48 f1       	brcs	.+82     	; 0xf02 <DIO_u8Init_PIN+0x182>
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	80 32       	cpi	r24, 0x20	; 32
     eb4:	30 f5       	brcc	.+76     	; 0xf02 <DIO_u8Init_PIN+0x182>
		{
			                               /*InCase PORTD*/
				ASSIGN_BIT(DIRECTION_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8Dir);      /*ASSIGN PIN NO to entered Direction*/
     eb6:	a1 e3       	ldi	r26, 0x31	; 49
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e3       	ldi	r30, 0x31	; 49
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9c 01       	movw	r18, r24
     eca:	28 51       	subi	r18, 0x18	; 24
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_u8Init_PIN+0x158>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	2a 95       	dec	r18
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_u8Init_PIN+0x154>
     edc:	80 95       	com	r24
     ede:	48 23       	and	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	48 97       	sbiw	r24, 0x18	; 24
     eee:	b9 01       	movw	r22, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8Init_PIN+0x176>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	8a 95       	dec	r24
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8Init_PIN+0x172>
     efa:	cb 01       	movw	r24, r22
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8Init_PIN+0x186>
		}
		else
		{
			/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
		}			

	}

	return Local_u8Error;  /*if ERROR exist it return 1 if NO ERROR return 0*/
     f06:	89 81       	ldd	r24, Y+1	; 0x01
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <DIO_u8SetPortValue>:
/*Description: Set PORT Value (from 0 to 255)
 * Input     : Copy_u8PortNB (PORT Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortValue(uint8_t Copy_u8PortNB,uint8_t Copy_u8Value)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_u8SetPortValue+0x6>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <DIO_u8SetPortValue+0x8>
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;                 /*Local Error State*/
     f26:	19 82       	std	Y+1, r1	; 0x01
		
	if(Copy_u8Value < DIO_HIGH || Copy_u8Value > DIO_ALL) /*Check if entered Value is not available (negative value or more than 255(8 bit))*/
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 23       	and	r24, r24
     f2c:	19 f4       	brne	.+6      	; 0xf34 <DIO_u8SetPortValue+0x20>
	{
		Local_u8Error=ERROR; /*Error Status : Error*/
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	35 c0       	rjmp	.+106    	; 0xf9e <DIO_u8SetPortValue+0x8a>
	}
	else
	{
		switch (Copy_u8PortNB)               /*Switch case on PORT Number*/
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	3d 83       	std	Y+5, r19	; 0x05
     f3c:	2c 83       	std	Y+4, r18	; 0x04
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	d1 f0       	breq	.+52     	; 0xf7c <DIO_u8SetPortValue+0x68>
     f48:	2c 81       	ldd	r18, Y+4	; 0x04
     f4a:	3d 81       	ldd	r19, Y+5	; 0x05
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	2c f4       	brge	.+10     	; 0xf5c <DIO_u8SetPortValue+0x48>
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	61 f0       	breq	.+24     	; 0xf72 <DIO_u8SetPortValue+0x5e>
     f5a:	1f c0       	rjmp	.+62     	; 0xf9a <DIO_u8SetPortValue+0x86>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	81 f0       	breq	.+32     	; 0xf86 <DIO_u8SetPortValue+0x72>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	81 f0       	breq	.+32     	; 0xf90 <DIO_u8SetPortValue+0x7c>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <DIO_u8SetPortValue+0x86>
		{
			case DIO_PORT_0 :                    /*InCase PORTA*/
				VALUE_PORT0= Copy_u8Value;         /*Set PORTA Value*/
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	80 83       	st	Z, r24
     f7a:	11 c0       	rjmp	.+34     	; 0xf9e <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_1 :                    /*InCase PORTB*/
				VALUE_PORT1= Copy_u8Value;         /*Set PORTB Value*/
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	80 83       	st	Z, r24
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_2 :                    /*InCase PORTC*/
				VALUE_PORT2= Copy_u8Value;         /*Set PORTC Value*/
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	80 83       	st	Z, r24
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <DIO_u8SetPortValue+0x8a>
					break;
			case DIO_PORT_3 :                    /*InCase PORTD*/
				VALUE_PORT3= Copy_u8Value;         //Set PORTD Value*/
     f90:	e2 e3       	ldi	r30, 0x32	; 50
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	80 83       	st	Z, r24
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_u8SetPortValue+0x8a>
					break;
			default :                           /*Other Case Wrong PORT NO*/
					Local_u8Error=ERROR;            /*Error Flag*/
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
	}
		/*Return Error State*/
		return Local_u8Error;              /*if ERROR exist it return 1 if NO ERROR return 0*/
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DIO_u8SetPinValue>:
/*Description: Set PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinNB (PIN Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
extern uint8_t DIO_u8SetPinValue(uint8_t Copy_u8PinN,uint8_t Copy_u8Value)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_u8SetPinValue+0x6>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;                 /*Local Error State*/
     fc0:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PinN>MAX_PIN_NO)      /*Check if Entered PIN NO. is more Than 7*/
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	80 32       	cpi	r24, 0x20	; 32
     fc6:	18 f0       	brcs	.+6      	; 0xfce <DIO_u8SetPinValue+0x1e>
		{
			Local_u8Error=ERROR;           /*Return ERROR*/
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	b4 c0       	rjmp	.+360    	; 0x1136 <DIO_u8SetPinValue+0x186>
		}
		else if(Copy_u8Value != DIO_LOW && Copy_u8Value != DIO_HIGH)   /*Check if entered PIN Direction is not INPUT or OUTPUT*/
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 23       	and	r24, r24
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <DIO_u8SetPinValue+0x30>
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <DIO_u8SetPinValue+0x30>
		{
			Local_u8Error=ERROR;             /*Return ERROR*/
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	ab c0       	rjmp	.+342    	; 0x1136 <DIO_u8SetPinValue+0x186>
		}
		else                            /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
		{
			
			if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	10 f5       	brcc	.+68     	; 0x102a <DIO_u8SetPinValue+0x7a>
			{		/*InCase PORTA*/
				ASSIGN_BIT(VALUE_PORT0,Copy_u8PinN,Copy_u8Value);  /*ASSIGN PIN NO to entered Direction*/
     fe6:	ab e3       	ldi	r26, 0x3B	; 59
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e3       	ldi	r30, 0x3B	; 59
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8SetPinValue+0x52>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8SetPinValue+0x4e>
    1006:	80 95       	com	r24
    1008:	48 23       	and	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	b9 01       	movw	r22, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8SetPinValue+0x6e>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8SetPinValue+0x6a>
    1022:	cb 01       	movw	r24, r22
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	86 c0       	rjmp	.+268    	; 0x1136 <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 30       	cpi	r24, 0x08	; 8
    102e:	48 f1       	brcs	.+82     	; 0x1082 <DIO_u8SetPinValue+0xd2>
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	80 31       	cpi	r24, 0x10	; 16
    1034:	30 f5       	brcc	.+76     	; 0x1082 <DIO_u8SetPinValue+0xd2>
			{
												/*InCase PORTB*/
				ASSIGN_BIT(VALUE_PORT1,(Copy_u8PinN-PIN_PER_PORT),Copy_u8Value);       /*ASSIGN PIN NO to entered Direction*/
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 01       	movw	r18, r24
    104a:	28 50       	subi	r18, 0x08	; 8
    104c:	30 40       	sbci	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_u8SetPinValue+0xa8>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	2a 95       	dec	r18
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_u8SetPinValue+0xa4>
    105c:	80 95       	com	r24
    105e:	48 23       	and	r20, r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	08 97       	sbiw	r24, 0x08	; 8
    106e:	b9 01       	movw	r22, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8SetPinValue+0xc6>
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8SetPinValue+0xc2>
    107a:	cb 01       	movw	r24, r22
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	5a c0       	rjmp	.+180    	; 0x1136 <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 31       	cpi	r24, 0x10	; 16
    1086:	48 f1       	brcs	.+82     	; 0x10da <DIO_u8SetPinValue+0x12a>
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 31       	cpi	r24, 0x18	; 24
    108c:	30 f5       	brcc	.+76     	; 0x10da <DIO_u8SetPinValue+0x12a>
			{
											   /*InCase PORTC*/
				ASSIGN_BIT(VALUE_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8Value);     /*ASSIGN PIN NO to entered Direction*/
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 01       	movw	r18, r24
    10a2:	20 51       	subi	r18, 0x10	; 16
    10a4:	30 40       	sbci	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_u8SetPinValue+0x100>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	2a 95       	dec	r18
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_u8SetPinValue+0xfc>
    10b4:	80 95       	com	r24
    10b6:	48 23       	and	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	40 97       	sbiw	r24, 0x10	; 16
    10c6:	b9 01       	movw	r22, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_u8SetPinValue+0x11e>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_u8SetPinValue+0x11a>
    10d2:	cb 01       	movw	r24, r22
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	2e c0       	rjmp	.+92     	; 0x1136 <DIO_u8SetPinValue+0x186>
			}
			else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	88 31       	cpi	r24, 0x18	; 24
    10de:	48 f1       	brcs	.+82     	; 0x1132 <DIO_u8SetPinValue+0x182>
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	80 32       	cpi	r24, 0x20	; 32
    10e4:	30 f5       	brcc	.+76     	; 0x1132 <DIO_u8SetPinValue+0x182>
			{
											   /*InCase PORTD*/
				ASSIGN_BIT(VALUE_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8Value);       /*ASSIGN PIN NO to entered Direction*/
    10e6:	a2 e3       	ldi	r26, 0x32	; 50
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e3       	ldi	r30, 0x32	; 50
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9c 01       	movw	r18, r24
    10fa:	28 51       	subi	r18, 0x18	; 24
    10fc:	30 40       	sbci	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_u8SetPinValue+0x158>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	2a 95       	dec	r18
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_u8SetPinValue+0x154>
    110c:	80 95       	com	r24
    110e:	48 23       	and	r20, r24
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	48 97       	sbiw	r24, 0x18	; 24
    111e:	b9 01       	movw	r22, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_u8SetPinValue+0x176>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	8a 95       	dec	r24
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_u8SetPinValue+0x172>
    112a:	cb 01       	movw	r24, r22
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8SetPinValue+0x186>
			}
			else
			{
				/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	89 83       	std	Y+1, r24	; 0x01
			}			
		}

		return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    1136:	89 81       	ldd	r24, Y+1	; 0x01
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_u8GetPortValue>:
/*Description: Get PORT Value
 * Input     :  Copy_u8PortNB (PORT Number),*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPortValue(uint8_t Copy_u8PortNB,uint8_t *Copy_u8Value)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_u8GetPortValue+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_u8GetPortValue+0x8>
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_u8GetPortValue+0xa>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	7c 83       	std	Y+4, r23	; 0x04
    1156:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;              /*Local Error State : NO ERROR*/
    1158:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Value ==NULL_POINTER)  /*Check if Pointer points to Nothing*/
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	19 f4       	brne	.+6      	; 0x1168 <DIO_u8GetPortValue+0x24>
	{
		Local_u8Error=ERROR;             /*if it points to Nothing ERROR State : ERROR*/
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	3d c0       	rjmp	.+122    	; 0x11e2 <DIO_u8GetPortValue+0x9e>
	}
	else
	{
		switch(Copy_u8PortNB)            /*Switch case on PORT Number*/
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3e 83       	std	Y+6, r19	; 0x06
    1170:	2d 83       	std	Y+5, r18	; 0x05
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	e1 f0       	breq	.+56     	; 0x11b4 <DIO_u8GetPortValue+0x70>
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <DIO_u8GetPortValue+0x4c>
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 f0       	breq	.+24     	; 0x11a6 <DIO_u8GetPortValue+0x62>
    118e:	27 c0       	rjmp	.+78     	; 0x11de <DIO_u8GetPortValue+0x9a>
    1190:	2d 81       	ldd	r18, Y+5	; 0x05
    1192:	3e 81       	ldd	r19, Y+6	; 0x06
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	a1 f0       	breq	.+40     	; 0x11c2 <DIO_u8GetPortValue+0x7e>
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	b1 f0       	breq	.+44     	; 0x11d0 <DIO_u8GetPortValue+0x8c>
    11a4:	1c c0       	rjmp	.+56     	; 0x11de <DIO_u8GetPortValue+0x9a>
		{
			case DIO_PORT_0 :            /*InCase PORTA*/
				(*Copy_u8Value)=READ_PORT0;    /*Make Pointer Point Value of PORTA*/
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	80 83       	st	Z, r24
    11b2:	17 c0       	rjmp	.+46     	; 0x11e2 <DIO_u8GetPortValue+0x9e>
				break;
			case DIO_PORT_1 :            /*InCase PORTB*/
				(*Copy_u8Value)=READ_PORT1;    /*Make Pointer Point Value of PORTB*/
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	eb 81       	ldd	r30, Y+3	; 0x03
    11bc:	fc 81       	ldd	r31, Y+4	; 0x04
    11be:	80 83       	st	Z, r24
    11c0:	10 c0       	rjmp	.+32     	; 0x11e2 <DIO_u8GetPortValue+0x9e>
				break;
		    case DIO_PORT_2 :            /*InCase PORTC*/
		    	(*Copy_u8Value)=READ_PORT2;    /*Make Pointer Point Value of PORTC*/
    11c2:	e3 e3       	ldi	r30, 0x33	; 51
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ca:	fc 81       	ldd	r31, Y+4	; 0x04
    11cc:	80 83       	st	Z, r24
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <DIO_u8GetPortValue+0x9e>
				break;
			case DIO_PORT_3 :            /*InCase PORTD*/
				(*Copy_u8Value)=READ_PORT3;    /*Make Pointer Point Value of PORTD*/
    11d0:	e0 e3       	ldi	r30, 0x30	; 48
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	80 83       	st	Z, r24
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8GetPortValue+0x9e>
				break;
			default :                   /*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;        /*Error Flag*/
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
			    break;
		}
		
	}
	return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e4:	26 96       	adiw	r28, 0x06	; 6
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <DIO_u8GetPinValue>:
/*Description: Get PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinN (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPinValue(uint8_t Copy_u8PinN,uint8_t *Copy_u8Value)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_u8GetPinValue+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_u8GetPinValue+0x8>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	8a 83       	std	Y+2, r24	; 0x02
    1204:	7c 83       	std	Y+4, r23	; 0x04
    1206:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Local_u8Error=NO_ERROR;        /*Local Error State : NO ERROR*/
    1208:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8Value ==NULL_POINTER) /*Check if Pointer points to Nothing*/
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	19 f4       	brne	.+6      	; 0x1218 <DIO_u8GetPinValue+0x22>
		{
			Local_u8Error=ERROR;            /*if it points to Nothing ERROR State : ERROR*/
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	70 c0       	rjmp	.+224    	; 0x12f8 <DIO_u8GetPinValue+0x102>
		}
		else if(Copy_u8PinN>MAX_PIN_NO)  /*Check if Entered PIN NO. is more Than 7*/
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 32       	cpi	r24, 0x20	; 32
    121c:	18 f0       	brcs	.+6      	; 0x1224 <DIO_u8GetPinValue+0x2e>
		{
			Local_u8Error=ERROR;            /*Return ERROR*/
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a c0       	rjmp	.+212    	; 0x12f8 <DIO_u8GetPinValue+0x102>
		}
		else                           /*Pointer is Pointing to Value and PIN NO entered is not more than 7*/
		{
			
			if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	a0 f4       	brcc	.+40     	; 0x1252 <DIO_u8GetPinValue+0x5c>
			{		/*InCase PORTA*/
				(*Copy_u8Value)=GET_BIT(READ_PORT0,Copy_u8PinN);  /*ASSIGN PIN NO to entered Direction*/
    122a:	e9 e3       	ldi	r30, 0x39	; 57
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_u8GetPinValue+0x4c>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_u8GetPinValue+0x48>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	80 83       	st	Z, r24
    1250:	53 c0       	rjmp	.+166    	; 0x12f8 <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	88 30       	cpi	r24, 0x08	; 8
    1256:	c0 f0       	brcs	.+48     	; 0x1288 <DIO_u8GetPinValue+0x92>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 31       	cpi	r24, 0x10	; 16
    125c:	a8 f4       	brcc	.+42     	; 0x1288 <DIO_u8GetPinValue+0x92>
			{
												/*InCase PORTB*/
				(*Copy_u8Value)=GET_BIT(READ_PORT1,(Copy_u8PinN-(PIN_PER_PORT)));      /*ASSIGN PIN NO to entered Direction*/
    125e:	e6 e3       	ldi	r30, 0x36	; 54
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	08 97       	sbiw	r24, 0x08	; 8
    1270:	a9 01       	movw	r20, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8GetPinValue+0x82>
    1274:	55 95       	asr	r21
    1276:	47 95       	ror	r20
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_u8GetPinValue+0x7e>
    127c:	ca 01       	movw	r24, r20
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	eb 81       	ldd	r30, Y+3	; 0x03
    1282:	fc 81       	ldd	r31, Y+4	; 0x04
    1284:	80 83       	st	Z, r24
    1286:	38 c0       	rjmp	.+112    	; 0x12f8 <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 31       	cpi	r24, 0x10	; 16
    128c:	c0 f0       	brcs	.+48     	; 0x12be <DIO_u8GetPinValue+0xc8>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 31       	cpi	r24, 0x18	; 24
    1292:	a8 f4       	brcc	.+42     	; 0x12be <DIO_u8GetPinValue+0xc8>
			{
											   /*InCase PORTC*/
				(*Copy_u8Value)=GET_BIT(READ_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)));     /*ASSIGN PIN NO to entered Direction*/
    1294:	e3 e3       	ldi	r30, 0x33	; 51
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	40 97       	sbiw	r24, 0x10	; 16
    12a6:	a9 01       	movw	r20, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8GetPinValue+0xb8>
    12aa:	55 95       	asr	r21
    12ac:	47 95       	ror	r20
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8GetPinValue+0xb4>
    12b2:	ca 01       	movw	r24, r20
    12b4:	81 70       	andi	r24, 0x01	; 1
    12b6:	eb 81       	ldd	r30, Y+3	; 0x03
    12b8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ba:	80 83       	st	Z, r24
    12bc:	1d c0       	rjmp	.+58     	; 0x12f8 <DIO_u8GetPinValue+0x102>
			}
			else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	88 31       	cpi	r24, 0x18	; 24
    12c2:	c0 f0       	brcs	.+48     	; 0x12f4 <DIO_u8GetPinValue+0xfe>
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 32       	cpi	r24, 0x20	; 32
    12c8:	a8 f4       	brcc	.+42     	; 0x12f4 <DIO_u8GetPinValue+0xfe>
			{
											   /*InCase PORTD*/
				(*Copy_u8Value)=GET_BIT(READ_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)));     /*ASSIGN PIN NO to entered Direction*/
    12ca:	e0 e3       	ldi	r30, 0x30	; 48
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	48 97       	sbiw	r24, 0x18	; 24
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8GetPinValue+0xee>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8GetPinValue+0xea>
    12e8:	ca 01       	movw	r24, r20
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	eb 81       	ldd	r30, Y+3	; 0x03
    12ee:	fc 81       	ldd	r31, Y+4	; 0x04
    12f0:	80 83       	st	Z, r24
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_u8GetPinValue+0x102>
			}
			else
			{
				/*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                         /*Error Flag*/
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
			}			
		}
		return Local_u8Error;   /*if ERROR exist it return 1 if NO ERROR return 0*/
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DIO_u8SetPortInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortInputType(uint8_t Copy_u8PortNB,uint8_t Copy_u8InputType)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	29 97       	sbiw	r28, 0x09	; 9
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	8c 83       	std	Y+4, r24	; 0x04
    131e:	6d 83       	std	Y+5, r22	; 0x05
	/*Local Error State*/
	uint8_t Local_u8Error=NO_ERROR ,Copy_LocalStatus = NO_ERROR,Copy_LocalValue = DIO_OUTPUT;	/* check if any error happened. 0 fail/1 success*/
    1320:	1b 82       	std	Y+3, r1	; 0x03
    1322:	1a 82       	std	Y+2, r1	; 0x02
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
	/* Copy_LocalValue = 255 in case the port number wrong*/

	/* Get the value of the port direction*/
	switch (Copy_u8PortNB)
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	39 87       	std	Y+9, r19	; 0x09
    1330:	28 87       	std	Y+8, r18	; 0x08
    1332:	88 85       	ldd	r24, Y+8	; 0x08
    1334:	99 85       	ldd	r25, Y+9	; 0x09
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	d1 f0       	breq	.+52     	; 0x1370 <DIO_u8SetPortInputType+0x68>
    133c:	28 85       	ldd	r18, Y+8	; 0x08
    133e:	39 85       	ldd	r19, Y+9	; 0x09
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <DIO_u8SetPortInputType+0x48>
    1346:	88 85       	ldd	r24, Y+8	; 0x08
    1348:	99 85       	ldd	r25, Y+9	; 0x09
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <DIO_u8SetPortInputType+0x5e>
    134e:	1f c0       	rjmp	.+62     	; 0x138e <DIO_u8SetPortInputType+0x86>
    1350:	28 85       	ldd	r18, Y+8	; 0x08
    1352:	39 85       	ldd	r19, Y+9	; 0x09
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	81 f0       	breq	.+32     	; 0x137a <DIO_u8SetPortInputType+0x72>
    135a:	88 85       	ldd	r24, Y+8	; 0x08
    135c:	99 85       	ldd	r25, Y+9	; 0x09
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <DIO_u8SetPortInputType+0x7c>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <DIO_u8SetPortInputType+0x86>
	{
	case DIO_PORT_0:
		Copy_LocalValue = DIRECTION_PORT0;
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_1:
		Copy_LocalValue = DIRECTION_PORT1;
    1370:	e7 e3       	ldi	r30, 0x37	; 55
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	0c c0       	rjmp	.+24     	; 0x1392 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_2:
		Copy_LocalValue = DIRECTION_PORT2;
    137a:	e4 e3       	ldi	r30, 0x34	; 52
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <DIO_u8SetPortInputType+0x8a>
		break;
	case DIO_PORT_3:
		Copy_LocalValue = DIRECTION_PORT3;
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_u8SetPortInputType+0x8a>
		break;
	default:
		Copy_LocalStatus = ERROR;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	8a 83       	std	Y+2, r24	; 0x02
		break;
	}

	/* check if the port has the same value of Copy_u8InputType*/
	if ((Copy_LocalValue != NO_ERROR))
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	88 23       	and	r24, r24
    1396:	21 f0       	breq	.+8      	; 0x13a0 <DIO_u8SetPortInputType+0x98>
	{
		Local_u8Error = ERROR;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8b 83       	std	Y+3, r24	; 0x03
		Copy_LocalStatus = ERROR;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (Copy_LocalStatus != ERROR)
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	b1 f1       	breq	.+108    	; 0x1412 <DIO_u8SetPortInputType+0x10a>
	{
		if ((Copy_u8InputType >= DIO_INPUT) && (Copy_u8InputType <= DIO_ALL))
		{
			switch (Copy_u8PortNB)                /*Switch case on PORT Number*/
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3f 83       	std	Y+7, r19	; 0x07
    13ae:	2e 83       	std	Y+6, r18	; 0x06
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	d1 f0       	breq	.+52     	; 0x13ee <DIO_u8SetPortInputType+0xe6>
    13ba:	2e 81       	ldd	r18, Y+6	; 0x06
    13bc:	3f 81       	ldd	r19, Y+7	; 0x07
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_u8SetPortInputType+0xc6>
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	9f 81       	ldd	r25, Y+7	; 0x07
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <DIO_u8SetPortInputType+0xdc>
    13cc:	1f c0       	rjmp	.+62     	; 0x140c <DIO_u8SetPortInputType+0x104>
    13ce:	2e 81       	ldd	r18, Y+6	; 0x06
    13d0:	3f 81       	ldd	r19, Y+7	; 0x07
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <DIO_u8SetPortInputType+0xf0>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <DIO_u8SetPortInputType+0xfa>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <DIO_u8SetPortInputType+0x104>
			{
				case DIO_PORT_0 :                 /*InCase PORTA*/
					VALUE_PORT0= Copy_u8InputType;          /*Set PORTA Value*/
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	80 83       	st	Z, r24
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_1 :                 /*InCase PORTB*/
					VALUE_PORT1= Copy_u8InputType;          /*Set PORTB Value*/
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	80 83       	st	Z, r24
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_2 :                 /*InCase PORTC*/
					VALUE_PORT2= Copy_u8InputType;          /*Set PORTC Value*/
    13f8:	e5 e3       	ldi	r30, 0x35	; 53
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	80 83       	st	Z, r24
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <DIO_u8SetPortInputType+0x10e>
					break;
				case DIO_PORT_3 :                 /*InCase PORTD*/
					VALUE_PORT3= Copy_u8InputType;          /*Set PORTD Value*/
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	80 83       	st	Z, r24
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <DIO_u8SetPortInputType+0x10e>
					break;
				default :                        /*Other Case Wrong PORT NO*/
				Local_u8Error=ERROR;                 /*Error Flag*/
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_u8SetPortInputType+0x10e>
			Local_u8Error=ERROR;
		}
	}
	else
	{
		Local_u8Error=ERROR;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8Error;       /*if ERROR exist it return 1 if NO ERROR return 0*/
    1416:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1418:	29 96       	adiw	r28, 0x09	; 9
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <DIO_u8SetPinInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8PinN(PIN NO) ,Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinInputType(uint8_t Copy_u8PinN,uint8_t Copy_u8InputType)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8SetPinInputType+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <DIO_u8SetPinInputType+0x8>
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8c 83       	std	Y+4, r24	; 0x04
    143a:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Local_u8Error=NO_ERROR,Copy_LocalStatus = NO_ERROR,Copy_LocalValue = DIO_OUTPUT;	/* check if any error happened. 0 fail/1 success*/
    143c:	1b 82       	std	Y+3, r1	; 0x03
    143e:	1a 82       	std	Y+2, r1	; 0x02
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
	/* Copy_LocalValue = 1 in case the port number wrong*/


	if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	90 f4       	brcc	.+36     	; 0x146e <DIO_u8SetPinInputType+0x44>
	{		/*InCase PORTA*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT0,Copy_u8PinN);  /*ASSIGN PIN NO to read direction*/
    144a:	ea e3       	ldi	r30, 0x3A	; 58
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a9 01       	movw	r20, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_u8SetPinInputType+0x38>
    145e:	55 95       	asr	r21
    1460:	47 95       	ror	r20
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_u8SetPinInputType+0x34>
    1466:	ca 01       	movw	r24, r20
    1468:	81 70       	andi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	4d c0       	rjmp	.+154    	; 0x1508 <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	b0 f0       	brcs	.+44     	; 0x14a0 <DIO_u8SetPinInputType+0x76>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	80 31       	cpi	r24, 0x10	; 16
    1478:	98 f4       	brcc	.+38     	; 0x14a0 <DIO_u8SetPinInputType+0x76>
	{
										/*InCase PORTB*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT1,(Copy_u8PinN-(PIN_PER_PORT)));      /*ASSIGN PIN NO to read direction*/
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	08 97       	sbiw	r24, 0x08	; 8
    148c:	b9 01       	movw	r22, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8SetPinInputType+0x6a>
    1490:	75 95       	asr	r23
    1492:	67 95       	ror	r22
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8SetPinInputType+0x66>
    1498:	cb 01       	movw	r24, r22
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	b0 f0       	brcs	.+44     	; 0x14d2 <DIO_u8SetPinInputType+0xa8>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	88 31       	cpi	r24, 0x18	; 24
    14aa:	98 f4       	brcc	.+38     	; 0x14d2 <DIO_u8SetPinInputType+0xa8>
	{
									   /*InCase PORTC*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)));     /*ASSIGN PIN NO to read direction*/
    14ac:	e4 e3       	ldi	r30, 0x34	; 52
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	40 97       	sbiw	r24, 0x10	; 16
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8SetPinInputType+0x9c>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_u8SetPinInputType+0x98>
    14ca:	ca 01       	movw	r24, r20
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	1b c0       	rjmp	.+54     	; 0x1508 <DIO_u8SetPinInputType+0xde>
	}
	else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	88 31       	cpi	r24, 0x18	; 24
    14d6:	b0 f0       	brcs	.+44     	; 0x1504 <DIO_u8SetPinInputType+0xda>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	80 32       	cpi	r24, 0x20	; 32
    14dc:	98 f4       	brcc	.+38     	; 0x1504 <DIO_u8SetPinInputType+0xda>
	{
									   /*InCase PORTD*/
		Copy_LocalValue = GET_BIT(DIRECTION_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)));     /*ASSIGN PIN NO to read direction*/
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	48 97       	sbiw	r24, 0x18	; 24
    14f0:	b9 01       	movw	r22, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8SetPinInputType+0xce>
    14f4:	75 95       	asr	r23
    14f6:	67 95       	ror	r22
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8SetPinInputType+0xca>
    14fc:	cb 01       	movw	r24, r22
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8SetPinInputType+0xde>
	}
	else
	{
		/*Other Case Wrong PORT NO*/
		Copy_LocalStatus=ERROR;                         /*Error Flag*/
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	8a 83       	std	Y+2, r24	; 0x02
	}


	/* check if the port has the same value of Copy_u8InputType*/
	if (Copy_LocalValue != NO_ERROR)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 23       	and	r24, r24
    150c:	21 f0       	breq	.+8      	; 0x1516 <DIO_u8SetPinInputType+0xec>
	{
		Local_u8Error = ERROR;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	8b 83       	std	Y+3, r24	; 0x03
		Copy_LocalStatus = ERROR;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8a 83       	std	Y+2, r24	; 0x02
	}    
	/*Local Error State*/
	if (Copy_LocalStatus != ERROR)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	09 f4       	brne	.+2      	; 0x151e <DIO_u8SetPinInputType+0xf4>
    151c:	bb c0       	rjmp	.+374    	; 0x1694 <DIO_u8SetPinInputType+0x26a>
	{

			if(Copy_u8PinN>MAX_PIN_NO)    /*Check if Entered PIN NO. is more Than 7*/
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	80 32       	cpi	r24, 0x20	; 32
    1522:	18 f0       	brcs	.+6      	; 0x152a <DIO_u8SetPinInputType+0x100>
			{
				Local_u8Error=ERROR;         /*Return ERROR*/
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	b7 c0       	rjmp	.+366    	; 0x1698 <DIO_u8SetPinInputType+0x26e>
			}
			else if(Copy_u8InputType != DIO_LOW && Copy_u8InputType != DIO_HIGH)  /*Check if entered PIN Direction is not INPUT or OUTPUT*/
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	88 23       	and	r24, r24
    152e:	31 f0       	breq	.+12     	; 0x153c <DIO_u8SetPinInputType+0x112>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	19 f0       	breq	.+6      	; 0x153c <DIO_u8SetPinInputType+0x112>
			{
				Local_u8Error=ERROR;      /*Return ERROR*/
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	ae c0       	rjmp	.+348    	; 0x1698 <DIO_u8SetPinInputType+0x26e>
			}
			else                     /*Entered PIN NO is not more than 7 and Direction is INPUT or OUTPUT*/
			{
				if(Copy_u8PinN>=0 && Copy_u8PinN<PIN_PER_PORT)
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	10 f5       	brcc	.+68     	; 0x1586 <DIO_u8SetPinInputType+0x15c>
				{		/*InCase PORTA*/
					ASSIGN_BIT(VALUE_PORT0,Copy_u8PinN,Copy_u8InputType); /*ASSIGN PIN NO to read direction*/
    1542:	ab e3       	ldi	r26, 0x3B	; 59
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	eb e3       	ldi	r30, 0x3B	; 59
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_u8SetPinInputType+0x134>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_u8SetPinInputType+0x130>
    1562:	80 95       	com	r24
    1564:	48 23       	and	r20, r24
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_u8SetPinInputType+0x150>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_u8SetPinInputType+0x14c>
    157e:	cb 01       	movw	r24, r22
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	89 c0       	rjmp	.+274    	; 0x1698 <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_1+1)*PIN_PER_PORT)
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	48 f1       	brcs	.+82     	; 0x15de <DIO_u8SetPinInputType+0x1b4>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	80 31       	cpi	r24, 0x10	; 16
    1590:	30 f5       	brcc	.+76     	; 0x15de <DIO_u8SetPinInputType+0x1b4>
				{
													/*InCase PORTB*/
					ASSIGN_BIT(VALUE_PORT1,(Copy_u8PinN-(PIN_PER_PORT)),Copy_u8InputType);      /*ASSIGN PIN NO to read direction*/
    1592:	a8 e3       	ldi	r26, 0x38	; 56
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e8 e3       	ldi	r30, 0x38	; 56
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 01       	movw	r18, r24
    15a6:	28 50       	subi	r18, 0x08	; 8
    15a8:	30 40       	sbci	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8SetPinInputType+0x18a>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_u8SetPinInputType+0x186>
    15b8:	80 95       	com	r24
    15ba:	48 23       	and	r20, r24
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	08 97       	sbiw	r24, 0x08	; 8
    15ca:	b9 01       	movw	r22, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_u8SetPinInputType+0x1a8>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_u8SetPinInputType+0x1a4>
    15d6:	cb 01       	movw	r24, r22
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	5d c0       	rjmp	.+186    	; 0x1698 <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=2*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_2+1)*PIN_PER_PORT)
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	80 31       	cpi	r24, 0x10	; 16
    15e2:	48 f1       	brcs	.+82     	; 0x1636 <DIO_u8SetPinInputType+0x20c>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	88 31       	cpi	r24, 0x18	; 24
    15e8:	30 f5       	brcc	.+76     	; 0x1636 <DIO_u8SetPinInputType+0x20c>
				{
												   /*InCase PORTC*/
					ASSIGN_BIT(VALUE_PORT2,(Copy_u8PinN-(2*PIN_PER_PORT)),Copy_u8InputType);     /*ASSIGN PIN NO to read direction*/
    15ea:	a5 e3       	ldi	r26, 0x35	; 53
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e3       	ldi	r30, 0x35	; 53
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c 01       	movw	r18, r24
    15fe:	20 51       	subi	r18, 0x10	; 16
    1600:	30 40       	sbci	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_u8SetPinInputType+0x1e2>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	2a 95       	dec	r18
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_u8SetPinInputType+0x1de>
    1610:	80 95       	com	r24
    1612:	48 23       	and	r20, r24
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	40 97       	sbiw	r24, 0x10	; 16
    1622:	b9 01       	movw	r22, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8SetPinInputType+0x200>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8SetPinInputType+0x1fc>
    162e:	cb 01       	movw	r24, r22
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	31 c0       	rjmp	.+98     	; 0x1698 <DIO_u8SetPinInputType+0x26e>
				}
				else if(Copy_u8PinN>=3*PIN_PER_PORT && Copy_u8PinN<(DIO_PORT_3+1)*PIN_PER_PORT)
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	88 31       	cpi	r24, 0x18	; 24
    163a:	48 f1       	brcs	.+82     	; 0x168e <DIO_u8SetPinInputType+0x264>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	80 32       	cpi	r24, 0x20	; 32
    1640:	30 f5       	brcc	.+76     	; 0x168e <DIO_u8SetPinInputType+0x264>
				{
												   /*InCase PORTD*/
					ASSIGN_BIT(VALUE_PORT3,(Copy_u8PinN-(3*PIN_PER_PORT)),Copy_u8InputType);    /*ASSIGN PIN NO to read direction*/
    1642:	a2 e3       	ldi	r26, 0x32	; 50
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e2 e3       	ldi	r30, 0x32	; 50
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c 01       	movw	r18, r24
    1656:	28 51       	subi	r18, 0x18	; 24
    1658:	30 40       	sbci	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_u8SetPinInputType+0x23a>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	2a 95       	dec	r18
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_u8SetPinInputType+0x236>
    1668:	80 95       	com	r24
    166a:	48 23       	and	r20, r24
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	48 97       	sbiw	r24, 0x18	; 24
    167a:	b9 01       	movw	r22, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8SetPinInputType+0x258>
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8SetPinInputType+0x254>
    1686:	cb 01       	movw	r24, r22
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <DIO_u8SetPinInputType+0x26e>
				}
				else
				{
					/*Other Case Wrong PORT NO*/
					Copy_LocalStatus=ERROR;                         /*Error Flag*/
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8a 83       	std	Y+2, r24	; 0x02
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_u8SetPinInputType+0x26e>
				}
			}
	}
	else
	{
		Local_u8Error=ERROR;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	8b 83       	std	Y+3, r24	; 0x03
	}

			return Local_u8Error;  /*if ERROR exist it return 1 if NO ERROR return 0*/
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <LED_Value>:
/*Description: LED on/off
 * Input     : Copy_u8PIN_No (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t LED_Value(uint8_t Copy_u8PINNo,uint8_t Copy_u8Value)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <LED_Value+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t LocalError = NO_ERROR;
    16ba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PINNo < MINIMUM_PIN_NO|| Copy_u8PINNo >MAX_PIN_NO)
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	80 32       	cpi	r24, 0x20	; 32
    16c0:	18 f0       	brcs	.+6      	; 0x16c8 <LED_Value+0x1e>
	{
		LocalError = ERROR;   //ERROR
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <LED_Value+0x26>
	}
	else
	{
		DIO_u8SetPinValue(Copy_u8PINNo,Copy_u8Value);
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	6b 81       	ldd	r22, Y+3	; 0x03
    16cc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	}
	return LocalError;
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <main>:
/*________________________________________________________________*/
/******************************************************************/
/*                        MAIN                                    */
/******************************************************************/
int main(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <main+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <main+0x8>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <main+0xa>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62

	/*______________PIN Initialization_____________________________*/

	DIO_u8Init_PIN(DIO_PIN_NO_12,DIO_OUTPUT);
    16ec:	8c e0       	ldi	r24, 0x0C	; 12
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_u8Init_PIN>
	DIO_u8Init_PIN(DIO_PIN_NO_13,DIO_OUTPUT);
    16f4:	8d e0       	ldi	r24, 0x0D	; 13
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_u8Init_PIN>
	DIO_u8Init_PIN(DIO_PIN_NO_14,DIO_OUTPUT);
    16fc:	8e e0       	ldi	r24, 0x0E	; 14
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_u8Init_PIN>
	DIO_u8Init_PIN(DIO_PIN_NO_15,DIO_OUTPUT);
    1704:	8f e0       	ldi	r24, 0x0F	; 15
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	0e 94 c0 06 	call	0xd80	; 0xd80 <DIO_u8Init_PIN>
	/*__________PIN INITIAL VALUES__________________________________*/
	LED_Value(DIO_PIN_NO_12,LED_OFF);
    170c:	8c e0       	ldi	r24, 0x0C	; 12
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LED_Value>
	LED_Value(DIO_PIN_NO_13,LED_OFF);
    1714:	8d e0       	ldi	r24, 0x0D	; 13
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LED_Value>
	LED_Value(DIO_PIN_NO_14,LED_OFF);
    171c:	8e e0       	ldi	r24, 0x0E	; 14
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LED_Value>
	LED_Value(DIO_PIN_NO_15,LED_OFF);
    1724:	8f e0       	ldi	r24, 0x0F	; 15
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LED_Value>



	str_UartConfg_t ob1;

	ob1.u32_BaudRate = 2400;
    172c:	80 e6       	ldi	r24, 0x60	; 96
    172e:	99 e0       	ldi	r25, 0x09	; 9
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	ab 83       	std	Y+3, r26	; 0x03
    173a:	bc 83       	std	Y+4, r27	; 0x04
	ob1.u8_DataBits = UART_8_BIT_MODE;
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	8d 83       	std	Y+5, r24	; 0x05
	ob1.u8_FlagAction = UART_INTERRUPT;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	8e 83       	std	Y+6, r24	; 0x06

UART_init(&ob1);
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
//UART_sendByte(3);


	while(1)
	{
		UART_recieveByte(&x);
    174c:	8d e6       	ldi	r24, 0x6D	; 109
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 39 02 	call	0x472	; 0x472 <UART_recieveByte>

		if(x == 1)
    1754:	80 91 6d 00 	lds	r24, 0x006D
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	69 f4       	brne	.+26     	; 0x1776 <main+0x98>
		{
			DIO_u8SetPinValue(12,1);
    175c:	8c e0       	ldi	r24, 0x0C	; 12
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(13,0);
    1764:	8d e0       	ldi	r24, 0x0D	; 13
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(14,0);
    176c:	8e e0       	ldi	r24, 0x0E	; 14
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
    1774:	eb cf       	rjmp	.-42     	; 0x174c <main+0x6e>

		}
		else if(x==2)
    1776:	80 91 6d 00 	lds	r24, 0x006D
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	69 f4       	brne	.+26     	; 0x1798 <main+0xba>
		{
			DIO_u8SetPinValue(12,0);
    177e:	8c e0       	ldi	r24, 0x0C	; 12
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(13,1);
    1786:	8d e0       	ldi	r24, 0x0D	; 13
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(14,0);
    178e:	8e e0       	ldi	r24, 0x0E	; 14
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
    1796:	da cf       	rjmp	.-76     	; 0x174c <main+0x6e>

		}
		else if(x==3)
    1798:	80 91 6d 00 	lds	r24, 0x006D
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	b1 f6       	brne	.-84     	; 0x174c <main+0x6e>
		{
			DIO_u8SetPinValue(12,0);
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(13,0);
    17a8:	8d e0       	ldi	r24, 0x0D	; 13
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(14,1);
    17b0:	8e e0       	ldi	r24, 0x0E	; 14
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
    17b8:	c9 cf       	rjmp	.-110    	; 0x174c <main+0x6e>

000017ba <__udivmodsi4>:
    17ba:	a1 e2       	ldi	r26, 0x21	; 33
    17bc:	1a 2e       	mov	r1, r26
    17be:	aa 1b       	sub	r26, r26
    17c0:	bb 1b       	sub	r27, r27
    17c2:	fd 01       	movw	r30, r26
    17c4:	0d c0       	rjmp	.+26     	; 0x17e0 <__udivmodsi4_ep>

000017c6 <__udivmodsi4_loop>:
    17c6:	aa 1f       	adc	r26, r26
    17c8:	bb 1f       	adc	r27, r27
    17ca:	ee 1f       	adc	r30, r30
    17cc:	ff 1f       	adc	r31, r31
    17ce:	a2 17       	cp	r26, r18
    17d0:	b3 07       	cpc	r27, r19
    17d2:	e4 07       	cpc	r30, r20
    17d4:	f5 07       	cpc	r31, r21
    17d6:	20 f0       	brcs	.+8      	; 0x17e0 <__udivmodsi4_ep>
    17d8:	a2 1b       	sub	r26, r18
    17da:	b3 0b       	sbc	r27, r19
    17dc:	e4 0b       	sbc	r30, r20
    17de:	f5 0b       	sbc	r31, r21

000017e0 <__udivmodsi4_ep>:
    17e0:	66 1f       	adc	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	1a 94       	dec	r1
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <__udivmodsi4_loop>
    17ec:	60 95       	com	r22
    17ee:	70 95       	com	r23
    17f0:	80 95       	com	r24
    17f2:	90 95       	com	r25
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	bd 01       	movw	r22, r26
    17fa:	cf 01       	movw	r24, r30
    17fc:	08 95       	ret

000017fe <_exit>:
    17fe:	f8 94       	cli

00001800 <__stop_program>:
    1800:	ff cf       	rjmp	.-2      	; 0x1800 <__stop_program>
